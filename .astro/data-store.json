[["Map",1,2,7,8,186,187,786,787],"meta::meta",["Map",3,4,5,6],"astro-version","5.6.2","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"http://localhost:3000\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":3000,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/noop\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"svg\":false,\"serializeConfig\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","work",["Map",9,10,47,48,77,78,96,97,120,121,139,140,155,156],"iti-graviti",{"id":9,"data":11,"body":16,"filePath":17,"digest":18,"rendered":19,"legacyId":46},{"external":12,"draft":12,"title":13,"description":14,"date":15},false,"ITI GravITI UI Library","An explanation of my work on the GravITI UI component library for Intellectual Technology, Inc.",["Date","2024-11-20T00:00:00.000Z"],"# ITI GravITI\n\nThe GravITI (pronounced \"gravity\" but with clever marketing) UI component library is ITI's (Intellectual Technology, Inc.) in-house component library. The UX/UI design team worked to build the initial components in Figma, and I worked closely with them to implement the components using the Vue.js library.\n\nWe discussed whether to use Bootstrap or Tailwind (which was gaining popularity at the time). Given (1) Tailwind's youth and (2) our existing ubiquitous usage of Bootstrap, we ended up staying with Bootstrap. They are the only two runtime dependencies that GravITI has.\n\n## Purpose\n\n\"Why not use an existing UI library like Vuetify, Quasar, or PrimeVue?\" Well, we *did* use PrimeVue for some early projects. It had the benefit of theming and existing functionality. It was a close call to either use PrimeVue or roll our own library. As for the other options, Quasar and Vuetify required too much buy-in for our purposes, and we have many legacy application in transition where we wanted to use the library at various states of transition without needing to update *everything*.\n\n**The reason to choose an in-house solution ultimately came down to an interest in control.** We wanted full control over the functionality, design, and roadmap of the library. I'm uncertain if I would have pushed for PrimeVue had I then the knowledge I have now. 🤔 One clear benefit has been the learning process along the way, i.e., how to configure tooling to generate a bundle usable in bundled projects and at runtime. In retrospect, the experience with Storybook has been valuable as well.\n\n## Design Details\n\nThe designs were done in Figma, so I spent a lot of time looking through the elements and their associated styles. That meant grabbing values from Figma, but it also meant communicating with the designers when some details were complicated. For example, Bootstrap uses units divisible by 16 to play with the browser's default setting of `16px === 1rem`. The designers were in the habit of base-5 units though. After some conversations and decision making, we ended up following the base-16 units. \n\nUnsurprisingly, there were many other issues to work through as the project evolved, but that's a story for another day.\n\n## Technical Details\n\nThe following is the current (as of Nov. 20, 2024) tech stack used within the GravITI library:\n\n- Vue.js (love that data reactivity)\n- Bootstrap\n- Vite (it began using Vue-CLI, but the transition was made as Vite matured into its v1 releases)\n- Jest (it's on the roadmap to switch to Vitest)\n- Storybook (more on this below)\n\n### Storybook\n\nWhen I began, Storybook became a very helpful tool for getting my components into a robust testing UI space and offered a lot in the way of out-of-the-box documentation. This was a great boon for my progress in advancing the library, which was (and still is) often a political game with the business units of the company. Those close to the technical portions of projects understand the value to keeping the library up-to-date. Those further away understandably… don't care.\n\nIn one of the minor version updates though, I noticed *a lot* of dependencies come down for Storybook. They were React-heavy packages (understandably given the underlying architecture is React). Many TypeScript type definitions came down as well. Here's where my problems began.\n\nSome of the `@types` definitions for Storybook may have been helpful for Storybook itself, and even React for relevant projects, but my Vue project types kept getting stomped on. Perhaps I could have contributed to the community work and figured out the solution for others in a similar situation, but the reality is (1) I have trouble selling explicit community support work or (2) working it into the other dev work to justify its inclusion in my task work.\n\nMaybe that's a \"blah blah blah, excuses\" thing, but it's what's real in my current experience. All in all, while Storybook has been a great help, this and some other issues have been complicating factors.\n\n## Wrap up\n\nUltimately, the project continues to be one of the more challenging and rewarding projects I've worked on at ITI. The foundational level they play in our applications means diligence and care must be taken. There's a large bull whip effect that happens when changes are made at that low a level of UI development. Although, I can honestly say it's one of my favorite projects.","src/content/work/iti-graviti.md","38c83314d5a15ff4",{"html":20,"metadata":21},"\u003Ch1 id=\"iti-graviti\">ITI GravITI\u003C/h1>\n\u003Cp>The GravITI (pronounced “gravity” but with clever marketing) UI component library is ITI’s (Intellectual Technology, Inc.) in-house component library. The UX/UI design team worked to build the initial components in Figma, and I worked closely with them to implement the components using the Vue.js library.\u003C/p>\n\u003Cp>We discussed whether to use Bootstrap or Tailwind (which was gaining popularity at the time). Given (1) Tailwind’s youth and (2) our existing ubiquitous usage of Bootstrap, we ended up staying with Bootstrap. They are the only two runtime dependencies that GravITI has.\u003C/p>\n\u003Ch2 id=\"purpose\">Purpose\u003C/h2>\n\u003Cp>“Why not use an existing UI library like Vuetify, Quasar, or PrimeVue?” Well, we \u003Cem>did\u003C/em> use PrimeVue for some early projects. It had the benefit of theming and existing functionality. It was a close call to either use PrimeVue or roll our own library. As for the other options, Quasar and Vuetify required too much buy-in for our purposes, and we have many legacy application in transition where we wanted to use the library at various states of transition without needing to update \u003Cem>everything\u003C/em>.\u003C/p>\n\u003Cp>\u003Cstrong>The reason to choose an in-house solution ultimately came down to an interest in control.\u003C/strong> We wanted full control over the functionality, design, and roadmap of the library. I’m uncertain if I would have pushed for PrimeVue had I then the knowledge I have now. 🤔 One clear benefit has been the learning process along the way, i.e., how to configure tooling to generate a bundle usable in bundled projects and at runtime. In retrospect, the experience with Storybook has been valuable as well.\u003C/p>\n\u003Ch2 id=\"design-details\">Design Details\u003C/h2>\n\u003Cp>The designs were done in Figma, so I spent a lot of time looking through the elements and their associated styles. That meant grabbing values from Figma, but it also meant communicating with the designers when some details were complicated. For example, Bootstrap uses units divisible by 16 to play with the browser’s default setting of \u003Ccode>16px === 1rem\u003C/code>. The designers were in the habit of base-5 units though. After some conversations and decision making, we ended up following the base-16 units.\u003C/p>\n\u003Cp>Unsurprisingly, there were many other issues to work through as the project evolved, but that’s a story for another day.\u003C/p>\n\u003Ch2 id=\"technical-details\">Technical Details\u003C/h2>\n\u003Cp>The following is the current (as of Nov. 20, 2024) tech stack used within the GravITI library:\u003C/p>\n\u003Cul>\n\u003Cli>Vue.js (love that data reactivity)\u003C/li>\n\u003Cli>Bootstrap\u003C/li>\n\u003Cli>Vite (it began using Vue-CLI, but the transition was made as Vite matured into its v1 releases)\u003C/li>\n\u003Cli>Jest (it’s on the roadmap to switch to Vitest)\u003C/li>\n\u003Cli>Storybook (more on this below)\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"storybook\">Storybook\u003C/h3>\n\u003Cp>When I began, Storybook became a very helpful tool for getting my components into a robust testing UI space and offered a lot in the way of out-of-the-box documentation. This was a great boon for my progress in advancing the library, which was (and still is) often a political game with the business units of the company. Those close to the technical portions of projects understand the value to keeping the library up-to-date. Those further away understandably… don’t care.\u003C/p>\n\u003Cp>In one of the minor version updates though, I noticed \u003Cem>a lot\u003C/em> of dependencies come down for Storybook. They were React-heavy packages (understandably given the underlying architecture is React). Many TypeScript type definitions came down as well. Here’s where my problems began.\u003C/p>\n\u003Cp>Some of the \u003Ccode>@types\u003C/code> definitions for Storybook may have been helpful for Storybook itself, and even React for relevant projects, but my Vue project types kept getting stomped on. Perhaps I could have contributed to the community work and figured out the solution for others in a similar situation, but the reality is (1) I have trouble selling explicit community support work or (2) working it into the other dev work to justify its inclusion in my task work.\u003C/p>\n\u003Cp>Maybe that’s a “blah blah blah, excuses” thing, but it’s what’s real in my current experience. All in all, while Storybook has been a great help, this and some other issues have been complicating factors.\u003C/p>\n\u003Ch2 id=\"wrap-up\">Wrap up\u003C/h2>\n\u003Cp>Ultimately, the project continues to be one of the more challenging and rewarding projects I’ve worked on at ITI. The foundational level they play in our applications means diligence and care must be taken. There’s a large bull whip effect that happens when changes are made at that low a level of UI development. Although, I can honestly say it’s one of my favorite projects.\u003C/p>",{"headings":22,"localImagePaths":43,"remoteImagePaths":44,"frontmatter":11,"imagePaths":45},[23,26,30,33,36,40],{"depth":24,"slug":9,"text":25},1,"ITI GravITI",{"depth":27,"slug":28,"text":29},2,"purpose","Purpose",{"depth":27,"slug":31,"text":32},"design-details","Design Details",{"depth":27,"slug":34,"text":35},"technical-details","Technical Details",{"depth":37,"slug":38,"text":39},3,"storybook","Storybook",{"depth":27,"slug":41,"text":42},"wrap-up","Wrap up",[],[],[],"iti-graviti.md","iti-projects",{"id":47,"data":49,"body":53,"filePath":54,"digest":55,"rendered":56,"legacyId":76},{"external":12,"draft":12,"title":50,"description":51,"date":52},"ITI Projects","A brief explanation of the kinds of projects I've been working on for the last 4 years.",["Date","2024-11-20T00:00:00.000Z"],"# ITI Projects\n\nI've written a bit more in-depth about my work on [ITI's GravITI UI Library](/work/iti-graviti), but this is about my broader body of work at ITI.\n\n## Website\n\nThe first project I began working on is the *KnowTo Drive Online* website. The purpose of this site is to provide an online portal for taking the written portion of the state driver's examination. Users register their information, often paying online, and take the exam all online. Test results, emails, and a strictly controlled user flow through the website are all part of the experience.\n\n**One of the more interesting aspects is the facial recognition feature during the exam.** A user allows access to his/her webcam, takes a control photo of a neutral expression of their face, and that photo is used as the control for facial matches throughout the exam. Photos are taken randomly throughout the exam and compared against the control photo. Any anomalies will cause the user to incur infractions that are tracked for auditing purposes when deemed necessary. This is one of my favorite features of the site.\n\nOne of the challenging aspects of the site is its architecture. It is a classic MVC website, so the front-end optimizations/updates I've made have been working within that paradigm instead of using a single-page application. This isn't generally a problem as many pages are simple text/disclaimer pages or require little to no JS. (Why load Vue.js or other libraries when vanilla JS will do?)\n\nOther more feature-rich pages do require a special touch. In addition to more interactive needs for some pages, each state has customizations and settings that can be adjusted on the site. The list of features offered has grown in four years, and many bitter lessons have been learned along the way. This is inevitable for any project with similar demands, and ensuring backwards compatibility and proper abstractions are part of the challenge. When it's done right though, it's very rewarding.\n\n## Web Applications\n\nAlong with the driver testing projects are a number of support admin applications. Some states request tools for managing Translators that can be provided on the fly for test-takers with English as a second language. Others may require customized driving routes (see the *SkillsTo Drive* project description below). There are many nuanced needs that arise when dealing with so many different states and jurisdictions. (ITI services many US states as well as several Canadian territories.) **We have built a lot of helper applications for our clients.**\n\nEach of these applications follows the single-page application architecture (in contrast to *KnowTo Drive Online*'s multi-page application structure, i.e. a classic website). Minimally, a Vue UI (using Vite as its bundler and our GravITI UI library) runs the front-end while one or more APIs provide data on the back-end. It's pretty standard stuff. Customizations are less common in these applications but not absent.\n\n## Others\n\nOther applications I've worked on stretch into less conventional web application spaces. As part of a collaborative effort with a third-party agency who were helping us in a very busy time, our team built a new app called *SkillsTo Drive*. This app is used on the road during the driver's test where the instructor uses a tablet to inspect the vehicle and keep track of driving test points for a particular route.\n\nThe *SkillsTo Drive* app is built in [*React Native for Windows*](https://github.com/microsoft/react-native-windows). My opinion of *React Native for Windows* has been mixed. React Native as a core concept is a great way to help web developers break into the native/mobile app spaces. While the performance will never be quite as good as a native app in their typical languages, it lets developers build apps quickly in a space they'd otherwise take longer to build. *React Native for Windows* in particular has not seen the frequency of stable updates we had hoped when we joined the third-party team in its development.\n\nAll the same, it's a great product to offer state driver testing offices. (Personally, I'd be very interested in building a Progressive Web App version some day, but it's unlikely that proposal will gain traction while the current app is still relatively young.)\n\n## Coda\n\nThis is just a brief dip into the kinds of projects I've been working on with the great ITI team. There are still so many great opportunities and ideas, some of which are on the horizon. The greatest challenge has been finding the right timing for many of the projects and improvements we see daily (consequences of working so closely with them).\n\nAs ever, the tech world offers no shortage of fascinating new topics to study.","src/content/work/iti-projects.md","7b42d6c64981f924",{"html":57,"metadata":58},"\u003Ch1 id=\"iti-projects\">ITI Projects\u003C/h1>\n\u003Cp>I’ve written a bit more in-depth about my work on \u003Ca href=\"/work/iti-graviti\">ITI’s GravITI UI Library\u003C/a>, but this is about my broader body of work at ITI.\u003C/p>\n\u003Ch2 id=\"website\">Website\u003C/h2>\n\u003Cp>The first project I began working on is the \u003Cem>KnowTo Drive Online\u003C/em> website. The purpose of this site is to provide an online portal for taking the written portion of the state driver’s examination. Users register their information, often paying online, and take the exam all online. Test results, emails, and a strictly controlled user flow through the website are all part of the experience.\u003C/p>\n\u003Cp>\u003Cstrong>One of the more interesting aspects is the facial recognition feature during the exam.\u003C/strong> A user allows access to his/her webcam, takes a control photo of a neutral expression of their face, and that photo is used as the control for facial matches throughout the exam. Photos are taken randomly throughout the exam and compared against the control photo. Any anomalies will cause the user to incur infractions that are tracked for auditing purposes when deemed necessary. This is one of my favorite features of the site.\u003C/p>\n\u003Cp>One of the challenging aspects of the site is its architecture. It is a classic MVC website, so the front-end optimizations/updates I’ve made have been working within that paradigm instead of using a single-page application. This isn’t generally a problem as many pages are simple text/disclaimer pages or require little to no JS. (Why load Vue.js or other libraries when vanilla JS will do?)\u003C/p>\n\u003Cp>Other more feature-rich pages do require a special touch. In addition to more interactive needs for some pages, each state has customizations and settings that can be adjusted on the site. The list of features offered has grown in four years, and many bitter lessons have been learned along the way. This is inevitable for any project with similar demands, and ensuring backwards compatibility and proper abstractions are part of the challenge. When it’s done right though, it’s very rewarding.\u003C/p>\n\u003Ch2 id=\"web-applications\">Web Applications\u003C/h2>\n\u003Cp>Along with the driver testing projects are a number of support admin applications. Some states request tools for managing Translators that can be provided on the fly for test-takers with English as a second language. Others may require customized driving routes (see the \u003Cem>SkillsTo Drive\u003C/em> project description below). There are many nuanced needs that arise when dealing with so many different states and jurisdictions. (ITI services many US states as well as several Canadian territories.) \u003Cstrong>We have built a lot of helper applications for our clients.\u003C/strong>\u003C/p>\n\u003Cp>Each of these applications follows the single-page application architecture (in contrast to \u003Cem>KnowTo Drive Online\u003C/em>’s multi-page application structure, i.e. a classic website). Minimally, a Vue UI (using Vite as its bundler and our GravITI UI library) runs the front-end while one or more APIs provide data on the back-end. It’s pretty standard stuff. Customizations are less common in these applications but not absent.\u003C/p>\n\u003Ch2 id=\"others\">Others\u003C/h2>\n\u003Cp>Other applications I’ve worked on stretch into less conventional web application spaces. As part of a collaborative effort with a third-party agency who were helping us in a very busy time, our team built a new app called \u003Cem>SkillsTo Drive\u003C/em>. This app is used on the road during the driver’s test where the instructor uses a tablet to inspect the vehicle and keep track of driving test points for a particular route.\u003C/p>\n\u003Cp>The \u003Cem>SkillsTo Drive\u003C/em> app is built in \u003Ca href=\"https://github.com/microsoft/react-native-windows\">\u003Cem>React Native for Windows\u003C/em>\u003C/a>. My opinion of \u003Cem>React Native for Windows\u003C/em> has been mixed. React Native as a core concept is a great way to help web developers break into the native/mobile app spaces. While the performance will never be quite as good as a native app in their typical languages, it lets developers build apps quickly in a space they’d otherwise take longer to build. \u003Cem>React Native for Windows\u003C/em> in particular has not seen the frequency of stable updates we had hoped when we joined the third-party team in its development.\u003C/p>\n\u003Cp>All the same, it’s a great product to offer state driver testing offices. (Personally, I’d be very interested in building a Progressive Web App version some day, but it’s unlikely that proposal will gain traction while the current app is still relatively young.)\u003C/p>\n\u003Ch2 id=\"coda\">Coda\u003C/h2>\n\u003Cp>This is just a brief dip into the kinds of projects I’ve been working on with the great ITI team. There are still so many great opportunities and ideas, some of which are on the horizon. The greatest challenge has been finding the right timing for many of the projects and improvements we see daily (consequences of working so closely with them).\u003C/p>\n\u003Cp>As ever, the tech world offers no shortage of fascinating new topics to study.\u003C/p>",{"headings":59,"localImagePaths":73,"remoteImagePaths":74,"frontmatter":49,"imagePaths":75},[60,61,64,67,70],{"depth":24,"slug":47,"text":50},{"depth":27,"slug":62,"text":63},"website","Website",{"depth":27,"slug":65,"text":66},"web-applications","Web Applications",{"depth":27,"slug":68,"text":69},"others","Others",{"depth":27,"slug":71,"text":72},"coda","Coda",[],[],[],"iti-projects.md","green-eggs-ham-js",{"id":77,"data":79,"body":83,"filePath":84,"digest":85,"rendered":86,"legacyId":95},{"external":12,"draft":12,"title":80,"description":81,"date":82},"Green Eggs & Ham Word Counter - Vanilla JS","A fun starter project for future learning around a specific topic I know well.",["Date","2024-08-21T00:00:00.000Z"],"# Green Eggs & Ham Word Counter - Vanilla JS\n\n**tl;dr:** [see my *Green Eggs & Ham* play project](https://play.adamleis.com/geh-js/)\n\nI've begun a project series centered around counting the words from the classic Dr. Seuss book *Green Eggs & Ham*. It's quite simple: count how many words are in the book, and display them in a table of some kind. Extra points for providing sorting controls.\n\nThis can be done with any medium. I'm starting with web, because it's what I know. Vanilla JS is the simplest (for me) approach, and I can make it look nice. Well, as nice as an eye-scorching burn orange can be.\n\nFuture instances of the project will play with different delivery UIs: Python for CLI, Go for server-rendered web page, etc.\n\nIterating on the same idea with slight variations of tech implementation will allow me to focus on the differences for learning purposes (e.g. learning a new language, framework, environment, etc.).\n\nIf you're interested in trying to for yourself, [go to the site](https://play.adamleis.com/geh-js/). If you want to get started on your own project, [fork my repo](https://github.com/Made-of-Clay/geh-read).\n\nEither way, enjoy, and hit me up on the socials. Happy building.","src/content/work/green-eggs-ham-js.md","94dca587dce15b88",{"html":87,"metadata":88},"\u003Ch1 id=\"green-eggs--ham-word-counter---vanilla-js\">Green Eggs &#x26; Ham Word Counter - Vanilla JS\u003C/h1>\n\u003Cp>\u003Cstrong>tl;dr:\u003C/strong> \u003Ca href=\"https://play.adamleis.com/geh-js/\">see my \u003Cem>Green Eggs &#x26; Ham\u003C/em> play project\u003C/a>\u003C/p>\n\u003Cp>I’ve begun a project series centered around counting the words from the classic Dr. Seuss book \u003Cem>Green Eggs &#x26; Ham\u003C/em>. It’s quite simple: count how many words are in the book, and display them in a table of some kind. Extra points for providing sorting controls.\u003C/p>\n\u003Cp>This can be done with any medium. I’m starting with web, because it’s what I know. Vanilla JS is the simplest (for me) approach, and I can make it look nice. Well, as nice as an eye-scorching burn orange can be.\u003C/p>\n\u003Cp>Future instances of the project will play with different delivery UIs: Python for CLI, Go for server-rendered web page, etc.\u003C/p>\n\u003Cp>Iterating on the same idea with slight variations of tech implementation will allow me to focus on the differences for learning purposes (e.g. learning a new language, framework, environment, etc.).\u003C/p>\n\u003Cp>If you’re interested in trying to for yourself, \u003Ca href=\"https://play.adamleis.com/geh-js/\">go to the site\u003C/a>. If you want to get started on your own project, \u003Ca href=\"https://github.com/Made-of-Clay/geh-read\">fork my repo\u003C/a>.\u003C/p>\n\u003Cp>Either way, enjoy, and hit me up on the socials. Happy building.\u003C/p>",{"headings":89,"localImagePaths":92,"remoteImagePaths":93,"frontmatter":79,"imagePaths":94},[90],{"depth":24,"slug":91,"text":80},"green-eggs--ham-word-counter---vanilla-js",[],[],[],"green-eggs-ham-js.md","kona-erp",{"id":96,"data":98,"body":102,"filePath":103,"digest":104,"rendered":105,"legacyId":119},{"external":12,"draft":12,"title":99,"description":100,"date":101},"KONA","My primary project while working at Rosenboom.",["Date","2024-09-03T00:00:00.000Z"],"# KONA\n\n**tl;dr:** This is not a public web app.\n\nWorking at Rosenboom, I focused primarily on bolstering the front-end of the web application, which was using jQuery UI at the time.\n\nWhile working on KONA, I became more familiar with the business logic and back-end setup to the point where I could support more back-end work. It started out on Code Igniter and eventually transitioned to Phalcon PHP. The front-end was built using jQuery UI and eventually shifted to Vue.js and Webpack for the build step.\n\nThe KONA application was a platform for multiple sub-applications that ran within; Part Tracker, Employee Tracker, Job Tracker, and others lived within KONA. The following is a collection of screenshots I grabbed before I had to leave (due to COVID-related layoffs).\n\n## KONA App List\n\n\u003Cfigure class=\"max-box shadowbox\">\n    \u003Cimg src=\"/images/blog/kona--applist-desktop.jpg\" alt=\"App List Desktop\">\n    \u003Cfigcaption>App List - Desktop\u003C/figcaption>\n\u003C/figure>\n\n\u003Cfigure class=\"max-box shadowbox\">\n    \u003Cimg src=\"/images/blog/kona--applist-mobile.jpg\" alt=\"App List Mobile\">\n    \u003Cfigcaption>App List - Mobile\u003C/figcaption>\n\u003C/figure>\n\n\u003Cshadow-box src=\"/images/blog/kona--applist-mobile.jpg\" alt=\"App List Mobile\">\n    Testo Testington\n\u003C/shadow-box>\n\nThe app list showed all of the apps that a user had access to. The apps were grouped alphabetically and a filter is available for quickly finding apps. Apps could be saved by a given user into groups as a sibling tab of the app list.\n\n##","src/content/work/kona-erp.md","97818fbe48000602",{"html":106,"metadata":107},"\u003Ch1 id=\"kona\">KONA\u003C/h1>\n\u003Cp>\u003Cstrong>tl;dr:\u003C/strong> This is not a public web app.\u003C/p>\n\u003Cp>Working at Rosenboom, I focused primarily on bolstering the front-end of the web application, which was using jQuery UI at the time.\u003C/p>\n\u003Cp>While working on KONA, I became more familiar with the business logic and back-end setup to the point where I could support more back-end work. It started out on Code Igniter and eventually transitioned to Phalcon PHP. The front-end was built using jQuery UI and eventually shifted to Vue.js and Webpack for the build step.\u003C/p>\n\u003Cp>The KONA application was a platform for multiple sub-applications that ran within; Part Tracker, Employee Tracker, Job Tracker, and others lived within KONA. The following is a collection of screenshots I grabbed before I had to leave (due to COVID-related layoffs).\u003C/p>\n\u003Ch2 id=\"kona-app-list\">KONA App List\u003C/h2>\n\u003Cfigure class=\"max-box shadowbox\">\n    \u003Cimg src=\"/images/blog/kona--applist-desktop.jpg\" alt=\"App List Desktop\">\n    \u003Cfigcaption>App List - Desktop\u003C/figcaption>\n\u003C/figure>\n\u003Cfigure class=\"max-box shadowbox\">\n    \u003Cimg src=\"/images/blog/kona--applist-mobile.jpg\" alt=\"App List Mobile\">\n    \u003Cfigcaption>App List - Mobile\u003C/figcaption>\n\u003C/figure>\n\u003Cshadow-box src=\"/images/blog/kona--applist-mobile.jpg\" alt=\"App List Mobile\">\n    Testo Testington\n\u003C/shadow-box>\n\u003Cp>The app list showed all of the apps that a user had access to. The apps were grouped alphabetically and a filter is available for quickly finding apps. Apps could be saved by a given user into groups as a sibling tab of the app list.\u003C/p>\n\u003Ch2 id=\"\">\u003C/h2>",{"headings":108,"localImagePaths":116,"remoteImagePaths":117,"frontmatter":98,"imagePaths":118},[109,111,114],{"depth":24,"slug":110,"text":99},"kona",{"depth":27,"slug":112,"text":113},"kona-app-list","KONA App List",{"depth":27,"slug":115,"text":115},"",[],[],[],"kona-erp.md","victory-tracekr",{"id":120,"data":122,"body":126,"filePath":127,"digest":128,"rendered":129,"legacyId":138},{"external":12,"draft":12,"title":123,"description":124,"date":125},"Victorious!","A fun application I built for my gaming friend group to track our past games and wins.",["Date","2024-11-20T00:00:00.000Z"],"# Victorious!\n\nThis fun project is my [\"Victory Tracker\" application](https://victorious.adamleis.com/). Built back in 2020 (and perhaps in need of some updates), I built it to track my gaming friend group's history of victories and games played. (It's not often I view it on an extra large screen, and as I see it now for writing this post, I notice it has room for improvement. It never ends, does it? 🙂)\n\nUsing Firebase for storage and authentication, and Vuetify + Vue for the UI, we enter our game history and can view victory and player stats over the years of our games.","src/content/work/victory-tracekr.md","b084da5053040351",{"html":130,"metadata":131},"\u003Ch1 id=\"victorious\">Victorious!\u003C/h1>\n\u003Cp>This fun project is my \u003Ca href=\"https://victorious.adamleis.com/\">“Victory Tracker” application\u003C/a>. Built back in 2020 (and perhaps in need of some updates), I built it to track my gaming friend group’s history of victories and games played. (It’s not often I view it on an extra large screen, and as I see it now for writing this post, I notice it has room for improvement. It never ends, does it? 🙂)\u003C/p>\n\u003Cp>Using Firebase for storage and authentication, and Vuetify + Vue for the UI, we enter our game history and can view victory and player stats over the years of our games.\u003C/p>",{"headings":132,"localImagePaths":135,"remoteImagePaths":136,"frontmatter":122,"imagePaths":137},[133],{"depth":24,"slug":134,"text":123},"victorious",[],[],[],"victory-tracekr.md","my-work",{"id":139,"data":141,"body":142,"filePath":143,"digest":144,"rendered":145,"legacyId":154},{},"# My Work\n\nDue to the private nature of my work history in the last decade, the best I can offer (NDAs permitting) are some screenshots and explanations of the work.\n\nI'm working through updating this section as life/time permits and plan to continue improving the display of the content with each iteration.\n\nYour patience and interest is appreciated!","src/content/work/my-work.md","1dcf0c7c90c4919a",{"html":146,"metadata":147},"\u003Ch1 id=\"my-work\">My Work\u003C/h1>\n\u003Cp>Due to the private nature of my work history in the last decade, the best I can offer (NDAs permitting) are some screenshots and explanations of the work.\u003C/p>\n\u003Cp>I’m working through updating this section as life/time permits and plan to continue improving the display of the content with each iteration.\u003C/p>\n\u003Cp>Your patience and interest is appreciated!\u003C/p>",{"headings":148,"localImagePaths":151,"remoteImagePaths":152,"frontmatter":141,"imagePaths":153},[149],{"depth":24,"slug":139,"text":150},"My Work",[],[],[],"my-work.md","style-targeting",{"id":155,"data":157,"body":162,"filePath":163,"digest":164,"rendered":165,"legacyId":185},{"external":12,"draft":12,"title":158,"description":159,"date":160,"tags":161},"Style Targeting","An example of how I've managed to target certain elements on shared pages for different clients.",["Date","2025-01-07T00:00:00.000Z"],"css, styling, razor, mvc, dotnet","# Style Targeting\n\nIn one of the products I support at Intellectual Technology, Inc., called KnowTo Drive Online (K2DO), we have the core product code/behavior and many settings supporting the variations a state (we often call them \"jurisdictions\"). Sometimes, managing things like the display of certain granular elements is not feasible to manage with toggleable flags.\n\n## View Targets\n\nI first started \"configuring\" the display of certain elements by using data-* attributes in specific MVC views. Within the view, the top level element for the view was given an attribute of `data-page`, so if the page was \"Registration Form,\" the attribute would be `data-page=\"registration-form\"`.\n\nIf there was a button on the page that needed styled a different color because the state wanted to break color convention (e.g. that particular button should be a different color than the primary color - hasn't happened, but other wild scenarios have), I can target the button on that page.\n\n```css\n/* assuming the classic Bootstrap button */\n[data-page=\"registration-form\"] .btn {\n    --bs-primary: cornflowerblue;\n}\n```\n\nGranted, if the id for the element is available, `#registration-form-page` or something similar would also work.\n\n## Page Targets\n\nWhen I realized the view target approach required discipline that *I* am fine maintaining, but I couldn't demand of others reliably, I began reaching for a more automated approach.\n\nI used the same data-* approach, but instead chose a different name going with `data-page-path`. The same strategy applied allows developers to style elements on specific pages given a certain path.\n\n## Custom Razor Tag Targets\n\nIn the Razor template engine used in .NET MVC, custom tags and tag helpers can be added. I abstracted some common page layouts into these tags so the responsibility of layout wasn't an issues.\n\nAfter learning I could make custom tags and experimenting  Those tags also handled localization (l10n) strings for the specified site language. Again using the data-* attribute, I can target specific elements on the page based on the translation key.\n\n```html\n\u003Cl10n tag=\"button\" class=\"btn\">button.text.submit\u003C/l10n>\n\u003C!-- renders as \u003Cbutton class=\"btn\" data-l10n=\"button.text.submit\">Submit\u003C/button> -->\n```\n\nTo target the button, the selector is can be as simple as `[data-l10n=\"button.text.submit\"]`, or if there are multiple instances of a translation on the page, `header [data-l10n=\"site.title.withPortal\"]`.\n\n## Conclusion\n\nThere are a great many style \"configurations\" that can be made in shared codebases. There are many improvements that could be made for the product itself, but timing and resource availability can be restricting. While that's very frustrating at times, restriction is a catalyst for creativity, and using clever selector combos is one of my favorite creative tasks in the day-to-day grind.\n\nTo be fair, that doesn't make the best codebase to maintain, but maintenance woes are yet another restriction for creative thinking in code land.\n\n*Huzzah!* Happy styling, folks.","src/content/work/style-targeting.md","491e20eeb344183e",{"html":166,"metadata":167},"\u003Ch1 id=\"style-targeting\">Style Targeting\u003C/h1>\n\u003Cp>In one of the products I support at Intellectual Technology, Inc., called KnowTo Drive Online (K2DO), we have the core product code/behavior and many settings supporting the variations a state (we often call them “jurisdictions”). Sometimes, managing things like the display of certain granular elements is not feasible to manage with toggleable flags.\u003C/p>\n\u003Ch2 id=\"view-targets\">View Targets\u003C/h2>\n\u003Cp>I first started “configuring” the display of certain elements by using data-* attributes in specific MVC views. Within the view, the top level element for the view was given an attribute of \u003Ccode>data-page\u003C/code>, so if the page was “Registration Form,” the attribute would be \u003Ccode>data-page=\"registration-form\"\u003C/code>.\u003C/p>\n\u003Cp>If there was a button on the page that needed styled a different color because the state wanted to break color convention (e.g. that particular button should be a different color than the primary color - hasn’t happened, but other wild scenarios have), I can target the button on that page.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/* assuming the classic Bootstrap button */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">data-page\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"registration-form\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#B392F0\">.btn\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    --bs-primary\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">cornflowerblue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Granted, if the id for the element is available, \u003Ccode>#registration-form-page\u003C/code> or something similar would also work.\u003C/p>\n\u003Ch2 id=\"page-targets\">Page Targets\u003C/h2>\n\u003Cp>When I realized the view target approach required discipline that \u003Cem>I\u003C/em> am fine maintaining, but I couldn’t demand of others reliably, I began reaching for a more automated approach.\u003C/p>\n\u003Cp>I used the same data-* approach, but instead chose a different name going with \u003Ccode>data-page-path\u003C/code>. The same strategy applied allows developers to style elements on specific pages given a certain path.\u003C/p>\n\u003Ch2 id=\"custom-razor-tag-targets\">Custom Razor Tag Targets\u003C/h2>\n\u003Cp>In the Razor template engine used in .NET MVC, custom tags and tag helpers can be added. I abstracted some common page layouts into these tags so the responsibility of layout wasn’t an issues.\u003C/p>\n\u003Cp>After learning I could make custom tags and experimenting  Those tags also handled localization (l10n) strings for the specified site language. Again using the data-* attribute, I can target specific elements on the page based on the translation key.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\">l10n\u003C/span>\u003Cspan style=\"color:#B392F0\"> tag\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"button\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"btn\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>button.text.submit&#x3C;/\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\">l10n\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- renders as &#x3C;button class=\"btn\" data-l10n=\"button.text.submit\">Submit&#x3C;/button> -->\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>To target the button, the selector is can be as simple as \u003Ccode>[data-l10n=\"button.text.submit\"]\u003C/code>, or if there are multiple instances of a translation on the page, \u003Ccode>header [data-l10n=\"site.title.withPortal\"]\u003C/code>.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>There are a great many style “configurations” that can be made in shared codebases. There are many improvements that could be made for the product itself, but timing and resource availability can be restricting. While that’s very frustrating at times, restriction is a catalyst for creativity, and using clever selector combos is one of my favorite creative tasks in the day-to-day grind.\u003C/p>\n\u003Cp>To be fair, that doesn’t make the best codebase to maintain, but maintenance woes are yet another restriction for creative thinking in code land.\u003C/p>\n\u003Cp>\u003Cem>Huzzah!\u003C/em> Happy styling, folks.\u003C/p>",{"headings":168,"localImagePaths":182,"remoteImagePaths":183,"frontmatter":157,"imagePaths":184},[169,170,173,176,179],{"depth":24,"slug":155,"text":158},{"depth":27,"slug":171,"text":172},"view-targets","View Targets",{"depth":27,"slug":174,"text":175},"page-targets","Page Targets",{"depth":27,"slug":177,"text":178},"custom-razor-tag-targets","Custom Razor Tag Targets",{"depth":27,"slug":180,"text":181},"conclusion","Conclusion",[],[],[],"style-targeting.md","blog",["Map",188,189,207,208,226,227,259,260,277,278,299,300,330,331,361,362,395,396,414,415,437,438,463,464,479,480,510,511,538,539,586,587,621,622,651,652,697,698,736,737],"coming-soon--projects",{"id":188,"data":190,"body":194,"filePath":195,"digest":196,"rendered":197,"legacyId":206},{"external":12,"draft":12,"title":191,"description":192,"date":193},"Coming Soon: Projects & Experiments","I will be organizing more content to demonstrate my previous project work and web experiments.",["Date","2024-08-02T00:00:00.000Z"],"# Coming Soon: Projects & Experiments\n\nAs mentioned on [the home page](/), I'm just trying to get an MVP up for my site to keep delivering. I expect life will keep happening and my intended release timeline & schedule will not unfold as desired.\n\nThat being said, I know I need to get some *sizzle* on my site to showcase work I've done, projects I've worked on, things I'm tinkering with, and so on. In short, if this site will do anything for me professionally, it needs proof that I've learned things in 14ish years of professional web development.\n\nAny fool can drop jargon about React, components, and state management in a single-page application using a component-based UI. Or wtf `$('.card').next()` means and does. (Remember when jQuery was the defacto answer context on Stack?)\n\nAnyways, I am going to be getting some work posted where I demonstrate I *have* been making things and *can* make modern applications. I will also drag out and parade around projects that are clearly very dated just by looking at the source. (If you'd like to get some teasers on my abandoned project graveyard, [check out my GitHub](https://github.com/Made-of-Clay). There's even some living projects left over there, though the state of their maintenance is questionable at best.)\n\nCheck back soon or reach out on social media to peer pressure me to get my act together.","src/content/blog/coming-soon--projects.md","1354baaa9bded224",{"html":198,"metadata":199},"\u003Ch1 id=\"coming-soon-projects--experiments\">Coming Soon: Projects &#x26; Experiments\u003C/h1>\n\u003Cp>As mentioned on \u003Ca href=\"/\">the home page\u003C/a>, I’m just trying to get an MVP up for my site to keep delivering. I expect life will keep happening and my intended release timeline &#x26; schedule will not unfold as desired.\u003C/p>\n\u003Cp>That being said, I know I need to get some \u003Cem>sizzle\u003C/em> on my site to showcase work I’ve done, projects I’ve worked on, things I’m tinkering with, and so on. In short, if this site will do anything for me professionally, it needs proof that I’ve learned things in 14ish years of professional web development.\u003C/p>\n\u003Cp>Any fool can drop jargon about React, components, and state management in a single-page application using a component-based UI. Or wtf \u003Ccode>$('.card').next()\u003C/code> means and does. (Remember when jQuery was the defacto answer context on Stack?)\u003C/p>\n\u003Cp>Anyways, I am going to be getting some work posted where I demonstrate I \u003Cem>have\u003C/em> been making things and \u003Cem>can\u003C/em> make modern applications. I will also drag out and parade around projects that are clearly very dated just by looking at the source. (If you’d like to get some teasers on my abandoned project graveyard, \u003Ca href=\"https://github.com/Made-of-Clay\">check out my GitHub\u003C/a>. There’s even some living projects left over there, though the state of their maintenance is questionable at best.)\u003C/p>\n\u003Cp>Check back soon or reach out on social media to peer pressure me to get my act together.\u003C/p>",{"headings":200,"localImagePaths":203,"remoteImagePaths":204,"frontmatter":190,"imagePaths":205},[201],{"depth":24,"slug":202,"text":191},"coming-soon-projects--experiments",[],[],[],"coming-soon--projects.md","gamify-neovim",{"id":207,"data":209,"body":213,"filePath":214,"digest":215,"rendered":216,"legacyId":225},{"external":12,"draft":12,"title":210,"description":211,"date":212},"Gamify Neovim Learning","Some thoughts on trying to learn Neovim sustainably",["Date","2024-09-20T00:00:00.000Z"],"# Gamify Neovim Learning\n\nI recently finished [an excellent conversation between DHH, Primeagen, and Teej](https://youtu.be/mTa2d3OLXhg?si=9v6Mt4RJr4yxwEqy) (about [1:24:53](https://youtu.be/mTa2d3OLXhg?si=MxCWygnboLD-_UI6&t=5093) for this part of the conversation). In that conversation, DHH is asked about his experience using [Neovim](https://neovim.io/). I've often considered trying to learn it better and actually using it as a tool. Prime hypes it really well, and I admit that sways me.\n\nMy most recent itch was not from Prime though, it was something DHH said. Or better, it was how he described learning Neovim. He likened it to doing a \"sick combo\" in Street Fighter. **This idea of gamifying the use of Neovim might be what I need to get me started.**\n\n**My main reason for not jumping in yet** is the known time requirement needed to really get started. Configuring everything seems a daunting task. I'm not alone in this, I'm sure. My work is already so \"go go go\" trying to get projects done; my personal projects are allocated so little precious time that I don't want to be slow there. It's tough to get started. I believe though, once I get started and just *start* trying to use it, that'll be the bump I need to pass to succeed.\n\n> Mindset shifts make all the difference.\n\nBack to gamifying learning Neovim, if I think of the motions as game combos, would that make it easier, dare I say *more fun*, to learn it effectively? Mindset shifts make all the difference. Maybe this would be enough to get started with the motions, at least.\n\nGiven how much I type *just* for work, learning Neovim and getting really good at it has obvious value. The niche bragging rights of being proficient with it is also cool. I'm frequently wrestling with the ROI though. I suppose if I type 5 solid hours a day on average, and if I can be more efficient at that 5 hours, maybe that'd be enough.\n\nThe benefit of just *learning* something is also enough to be enticing. Couple that with the difficulty level of learning and the leveling-up that happens naturally, and it's *really* enticing. That dang starting bump though… That is both the smallest and largest mountain to conquer.\n\nIsn't it always?","src/content/blog/gamify-neovim.md","1206c4cdbd29c655",{"html":217,"metadata":218},"\u003Ch1 id=\"gamify-neovim-learning\">Gamify Neovim Learning\u003C/h1>\n\u003Cp>I recently finished \u003Ca href=\"https://youtu.be/mTa2d3OLXhg?si=9v6Mt4RJr4yxwEqy\">an excellent conversation between DHH, Primeagen, and Teej\u003C/a> (about \u003Ca href=\"https://youtu.be/mTa2d3OLXhg?si=MxCWygnboLD-_UI6&#x26;t=5093\">1:24:53\u003C/a> for this part of the conversation). In that conversation, DHH is asked about his experience using \u003Ca href=\"https://neovim.io/\">Neovim\u003C/a>. I’ve often considered trying to learn it better and actually using it as a tool. Prime hypes it really well, and I admit that sways me.\u003C/p>\n\u003Cp>My most recent itch was not from Prime though, it was something DHH said. Or better, it was how he described learning Neovim. He likened it to doing a “sick combo” in Street Fighter. \u003Cstrong>This idea of gamifying the use of Neovim might be what I need to get me started.\u003C/strong>\u003C/p>\n\u003Cp>\u003Cstrong>My main reason for not jumping in yet\u003C/strong> is the known time requirement needed to really get started. Configuring everything seems a daunting task. I’m not alone in this, I’m sure. My work is already so “go go go” trying to get projects done; my personal projects are allocated so little precious time that I don’t want to be slow there. It’s tough to get started. I believe though, once I get started and just \u003Cem>start\u003C/em> trying to use it, that’ll be the bump I need to pass to succeed.\u003C/p>\n\u003Cblockquote>\n\u003Cp>Mindset shifts make all the difference.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Back to gamifying learning Neovim, if I think of the motions as game combos, would that make it easier, dare I say \u003Cem>more fun\u003C/em>, to learn it effectively? Mindset shifts make all the difference. Maybe this would be enough to get started with the motions, at least.\u003C/p>\n\u003Cp>Given how much I type \u003Cem>just\u003C/em> for work, learning Neovim and getting really good at it has obvious value. The niche bragging rights of being proficient with it is also cool. I’m frequently wrestling with the ROI though. I suppose if I type 5 solid hours a day on average, and if I can be more efficient at that 5 hours, maybe that’d be enough.\u003C/p>\n\u003Cp>The benefit of just \u003Cem>learning\u003C/em> something is also enough to be enticing. Couple that with the difficulty level of learning and the leveling-up that happens naturally, and it’s \u003Cem>really\u003C/em> enticing. That dang starting bump though… That is both the smallest and largest mountain to conquer.\u003C/p>\n\u003Cp>Isn’t it always?\u003C/p>",{"headings":219,"localImagePaths":222,"remoteImagePaths":223,"frontmatter":209,"imagePaths":224},[220],{"depth":24,"slug":221,"text":210},"gamify-neovim-learning",[],[],[],"gamify-neovim.md","garden-tree-choice",{"id":226,"data":228,"body":237,"filePath":238,"digest":239,"rendered":240,"legacyId":258},{"external":12,"draft":12,"title":229,"description":230,"date":231,"tags":232},"The Garden, the Tree, and the Choice","A brief interpretation of the classic \"fall of mankind\" story.",["Date","2024-11-13T00:00:00.000Z"],[233,234,235,236],"theology","metaphor","garden","creation","# The Garden, the Tree, and the Choice\n\nEven as a child, before I was really interested in theology, philosophy, and literature, I've been fascinated by the story in the Garden of Eden. Maybe it's because the first created human was named Adam. (I should write a little about that name's meaning.)\n\nEden can scarcely be talked about without mentioning the Fall. So many questions arise from it. Why did God leave the tree so accessible in the first place? If God knew we would eat and Fall, why point it out or make it accessible? Is it fair that it was dangled in front of them? Why leave it in the middle of the Garden? How big is this Garden anyways?\n\nAmong the numerous question, I often asked what's up with the elements of the story? Why does eating a fruit cause spiritual cosmic tsunamis throughout creation and wreck everything? \n\nThere's no shortage of commentary on the Fall and its details. Nothing I'll cover here is new or revelatory, but you're still reading, so let's get to it.\n\nWhatever else it might be, **the story of the Fall is a metaphor that applies as much to us today as in the human genesis.** To be clear, I'm not calling into question or even addressing if I think the story is grounded in history. (I do, but that's not what I'm focusing on here.) I'm proposing that the Fall is an archetype of human behavior that still plays out today.\n\n## The Details\n\nLet's summarize the story briefly, though it's short enough to read in its entirety in Genesis 2 & 3. \n\n- God creates Adam (literally the \"human/man,\" like how we say \"mankind\" or \"humanity\").\n- God instructs \"the man\" (i.e. Adam) to eat from *anything* in the Garden *except* for \"the tree of knowledge of good and evil, for when you eat from it you will certainly die\" (Gen. 2:17 NIV).\n- Later, God creates \"the woman\" (Gen. 2:21-22), who is not named \"Eve\" until after the Fall (Gen. 3:20), interestingly.\n- The serpent (who is only associated with Satan in the New Testament; perhaps a later developed idea) convinces Even to eat the fruit (while Adam sat idly by; another often-overlooked detail; Gen. 3:6), who also gives some to her husband in the same sitting.\n- Their eyes \"were opened\" and they noticed their vulnerability (nakedness) and tried to cover it (another metaphor for hiding their shame; sidebar: try to understand nakedness in the cultural context rather than our own to appreciate what's being communicated.)\n\n## The Interpretation\n\nThe man/human/Adam is created, given instructions (another way to say it, given \"the Law\" or *torah*) on how to live in the Garden, given work, then given a helper (not a servant, but genuinely a helpmate; someone to strengthen Adam and help enable him in his God-given work). *Then*, God's instructions are challenged, misinterpreted/misquoted (by Eve and not corrected by Adam), and ignored.\n\nHere's the crux of the issue: **eating from the tree of knowledge of good and evil is akin to rejecting God's instructions and going one's own way.**\n\nThe expression \"good and evil\" is an idiot to express two extremes of the moral spectrum, good and evil, and everything in between. This is common in Hebrew literature: \"the heavens and the earth\" from the perspective of pre-scientific astronomy means \"the very top to the very bottom;\" \"as far as the east to the west\" means the furthest extremes on this physical plain; and of course, \"good and evil\" means \"all moral actions.\" Another way to more concisely express the idea in modern English would be \"the tree of moral knowledge.\"\n\n> Eating from the tree of moral knowledge is akin to rejecting God's instructions and going one's own way.\n\nGod instructs humanity (Adam and by extension Eve) to partake in all the activities available, but don't determine for yourselves what is morally right and wrong; that's God's job. (In apologetic discussions of the problem of evil/pain/suffering, moral law is not something God declares, nor something co-existing with God that God follows as the Euthyphro dilemma would suggest; moral law extends from God's own character).\n\nTo restate and rephrase: **eating from the tree of moral knowledge is akin to rejecting God's instructions and going one's own way.**\n\nWhen (any) human eats from that tree, the person declares, \"I know better than God's instruction on this matter,\" and effectively asserts moral superiority *over* God. It's fundamentally an act of pride and self-glorification/deification. Now the weight of the sin/fault is clear.\n\n## The Solution\n\nIt took a long time for the solution to become clear. When Jesus lived and worked on earth, he followed God's instructions. His life became a model for all \"Adams\" (and Eves). Much more can be said about the nature of cultural and ritual sacrifices, the atonement of sins, and the role Jesus played there, but again, that's another topic for another day.\n\n\"Jesus is the answer\" as the saying goes. Specifically, trusting that Jesus can and will save you from your own \"fruit-eating\" and help reunite you to the affectionate Creator Who strolled with us through the Garden. Give him some serious, honest, and humble (the opposite of pride) consideration.","src/content/blog/garden-tree-choice.md","c71bba4c032035dc",{"html":241,"metadata":242},"\u003Ch1 id=\"the-garden-the-tree-and-the-choice\">The Garden, the Tree, and the Choice\u003C/h1>\n\u003Cp>Even as a child, before I was really interested in theology, philosophy, and literature, I’ve been fascinated by the story in the Garden of Eden. Maybe it’s because the first created human was named Adam. (I should write a little about that name’s meaning.)\u003C/p>\n\u003Cp>Eden can scarcely be talked about without mentioning the Fall. So many questions arise from it. Why did God leave the tree so accessible in the first place? If God knew we would eat and Fall, why point it out or make it accessible? Is it fair that it was dangled in front of them? Why leave it in the middle of the Garden? How big is this Garden anyways?\u003C/p>\n\u003Cp>Among the numerous question, I often asked what’s up with the elements of the story? Why does eating a fruit cause spiritual cosmic tsunamis throughout creation and wreck everything?\u003C/p>\n\u003Cp>There’s no shortage of commentary on the Fall and its details. Nothing I’ll cover here is new or revelatory, but you’re still reading, so let’s get to it.\u003C/p>\n\u003Cp>Whatever else it might be, \u003Cstrong>the story of the Fall is a metaphor that applies as much to us today as in the human genesis.\u003C/strong> To be clear, I’m not calling into question or even addressing if I think the story is grounded in history. (I do, but that’s not what I’m focusing on here.) I’m proposing that the Fall is an archetype of human behavior that still plays out today.\u003C/p>\n\u003Ch2 id=\"the-details\">The Details\u003C/h2>\n\u003Cp>Let’s summarize the story briefly, though it’s short enough to read in its entirety in Genesis 2 &#x26; 3.\u003C/p>\n\u003Cul>\n\u003Cli>God creates Adam (literally the “human/man,” like how we say “mankind” or “humanity”).\u003C/li>\n\u003Cli>God instructs “the man” (i.e. Adam) to eat from \u003Cem>anything\u003C/em> in the Garden \u003Cem>except\u003C/em> for “the tree of knowledge of good and evil, for when you eat from it you will certainly die” (Gen. 2:17 NIV).\u003C/li>\n\u003Cli>Later, God creates “the woman” (Gen. 2:21-22), who is not named “Eve” until after the Fall (Gen. 3:20), interestingly.\u003C/li>\n\u003Cli>The serpent (who is only associated with Satan in the New Testament; perhaps a later developed idea) convinces Even to eat the fruit (while Adam sat idly by; another often-overlooked detail; Gen. 3:6), who also gives some to her husband in the same sitting.\u003C/li>\n\u003Cli>Their eyes “were opened” and they noticed their vulnerability (nakedness) and tried to cover it (another metaphor for hiding their shame; sidebar: try to understand nakedness in the cultural context rather than our own to appreciate what’s being communicated.)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"the-interpretation\">The Interpretation\u003C/h2>\n\u003Cp>The man/human/Adam is created, given instructions (another way to say it, given “the Law” or \u003Cem>torah\u003C/em>) on how to live in the Garden, given work, then given a helper (not a servant, but genuinely a helpmate; someone to strengthen Adam and help enable him in his God-given work). \u003Cem>Then\u003C/em>, God’s instructions are challenged, misinterpreted/misquoted (by Eve and not corrected by Adam), and ignored.\u003C/p>\n\u003Cp>Here’s the crux of the issue: \u003Cstrong>eating from the tree of knowledge of good and evil is akin to rejecting God’s instructions and going one’s own way.\u003C/strong>\u003C/p>\n\u003Cp>The expression “good and evil” is an idiot to express two extremes of the moral spectrum, good and evil, and everything in between. This is common in Hebrew literature: “the heavens and the earth” from the perspective of pre-scientific astronomy means “the very top to the very bottom;” “as far as the east to the west” means the furthest extremes on this physical plain; and of course, “good and evil” means “all moral actions.” Another way to more concisely express the idea in modern English would be “the tree of moral knowledge.”\u003C/p>\n\u003Cblockquote>\n\u003Cp>Eating from the tree of moral knowledge is akin to rejecting God’s instructions and going one’s own way.\u003C/p>\n\u003C/blockquote>\n\u003Cp>God instructs humanity (Adam and by extension Eve) to partake in all the activities available, but don’t determine for yourselves what is morally right and wrong; that’s God’s job. (In apologetic discussions of the problem of evil/pain/suffering, moral law is not something God declares, nor something co-existing with God that God follows as the Euthyphro dilemma would suggest; moral law extends from God’s own character).\u003C/p>\n\u003Cp>To restate and rephrase: \u003Cstrong>eating from the tree of moral knowledge is akin to rejecting God’s instructions and going one’s own way.\u003C/strong>\u003C/p>\n\u003Cp>When (any) human eats from that tree, the person declares, “I know better than God’s instruction on this matter,” and effectively asserts moral superiority \u003Cem>over\u003C/em> God. It’s fundamentally an act of pride and self-glorification/deification. Now the weight of the sin/fault is clear.\u003C/p>\n\u003Ch2 id=\"the-solution\">The Solution\u003C/h2>\n\u003Cp>It took a long time for the solution to become clear. When Jesus lived and worked on earth, he followed God’s instructions. His life became a model for all “Adams” (and Eves). Much more can be said about the nature of cultural and ritual sacrifices, the atonement of sins, and the role Jesus played there, but again, that’s another topic for another day.\u003C/p>\n\u003Cp>“Jesus is the answer” as the saying goes. Specifically, trusting that Jesus can and will save you from your own “fruit-eating” and help reunite you to the affectionate Creator Who strolled with us through the Garden. Give him some serious, honest, and humble (the opposite of pride) consideration.\u003C/p>",{"headings":243,"localImagePaths":255,"remoteImagePaths":256,"frontmatter":228,"imagePaths":257},[244,246,249,252],{"depth":24,"slug":245,"text":229},"the-garden-the-tree-and-the-choice",{"depth":27,"slug":247,"text":248},"the-details","The Details",{"depth":27,"slug":250,"text":251},"the-interpretation","The Interpretation",{"depth":27,"slug":253,"text":254},"the-solution","The Solution",[],[],[],"garden-tree-choice.md","generative-ai-correctness",{"id":259,"data":261,"body":266,"filePath":267,"digest":268,"rendered":269,"legacyId":276},{"external":12,"draft":262,"title":263,"description":264,"date":265},true,"Generative AI Correctness","meh",["Date","2022-11-05T00:00:00.000Z"],"When prompting AI to generate text (via ChatGPT, Google Bard, etc.), the output can _appear_ correct by being rationally constructed and well-formed. However, the assertions can still be false.\n\nThis has an interesting analogue in human interactions. An assertion may be proposed, and the internal components may all be logically consistent and coherent, but because some subtle nuance is incorrect, the results will be incorrect.\n\nHow do we solve for this in human interactions? Can that solve for AI interactions as well?","src/content/blog/generative-ai-correctness.md","45652c16a19d2a00",{"html":270,"metadata":271},"\u003Cp>When prompting AI to generate text (via ChatGPT, Google Bard, etc.), the output can \u003Cem>appear\u003C/em> correct by being rationally constructed and well-formed. However, the assertions can still be false.\u003C/p>\n\u003Cp>This has an interesting analogue in human interactions. An assertion may be proposed, and the internal components may all be logically consistent and coherent, but because some subtle nuance is incorrect, the results will be incorrect.\u003C/p>\n\u003Cp>How do we solve for this in human interactions? Can that solve for AI interactions as well?\u003C/p>",{"headings":272,"localImagePaths":273,"remoteImagePaths":274,"frontmatter":261,"imagePaths":275},[],[],[],[],"generative-ai-correctness.md","design-semver",{"id":277,"data":279,"body":282,"filePath":283,"digest":284,"rendered":285,"legacyId":298},{"external":12,"draft":262,"title":280,"description":264,"date":281},"Design & Semantic Versioning",["Date","2022-11-05T00:00:00.000Z"],"While semantic Versioning (semver) is primarily used for software versioning, it can plausibly be applied to design and graphic changes as well. First, consider the pattern in software; remember that version numbers increment for different reasons.\n\n## Semver in Software\n\n1. **Major:** _incompatible changes_ are made in the software, such as major feature additions or changes that may break backward compatibility.\n2. **Minor:** _backward-compatible functionality_ is added to the software, such as new features or enhancements.\n3. **Patch:** backward-compatible bug fixes or adjustments (e.g., text changes) are applied to the software.\n\nYou can [read more about these and other details](https://semver.org/), but this is sufficient for now.\n\n## Semver in Design\n\nThe idea is roughly the same. Major changes to the design should be shown in the major version. Minor and patch versions are the same. But what does it mean for a design to have a major or minor change?\n\nSoftware version tracking is useful for the consumers of that software. The same is true for designs: changes to the design are most relevant for consumers of the design, e.g., business unit members, developers, or designers making a 2nd set of designs that rely on the 1st (think \"style guide\" and the branding materials that depend on it).\n\n\u003Cfigure>\n# TODO add apple brand style guide image here\n\u003Cfigcaption>Taken from \u003Ca href=\"https://www.apple.com/legal/sales-support/certification/docs/logo_guidelines.pdf\">Apple Identity Guidelines\u003C/a>\u003C/figcaption>\n\u003C/figure>","src/content/blog/design-semver.md","baef9eeecb6384b8",{"html":286,"metadata":287},"\u003Cp>While semantic Versioning (semver) is primarily used for software versioning, it can plausibly be applied to design and graphic changes as well. First, consider the pattern in software; remember that version numbers increment for different reasons.\u003C/p>\n\u003Ch2 id=\"semver-in-software\">Semver in Software\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Major:\u003C/strong> \u003Cem>incompatible changes\u003C/em> are made in the software, such as major feature additions or changes that may break backward compatibility.\u003C/li>\n\u003Cli>\u003Cstrong>Minor:\u003C/strong> \u003Cem>backward-compatible functionality\u003C/em> is added to the software, such as new features or enhancements.\u003C/li>\n\u003Cli>\u003Cstrong>Patch:\u003C/strong> backward-compatible bug fixes or adjustments (e.g., text changes) are applied to the software.\u003C/li>\n\u003C/ol>\n\u003Cp>You can \u003Ca href=\"https://semver.org/\">read more about these and other details\u003C/a>, but this is sufficient for now.\u003C/p>\n\u003Ch2 id=\"semver-in-design\">Semver in Design\u003C/h2>\n\u003Cp>The idea is roughly the same. Major changes to the design should be shown in the major version. Minor and patch versions are the same. But what does it mean for a design to have a major or minor change?\u003C/p>\n\u003Cp>Software version tracking is useful for the consumers of that software. The same is true for designs: changes to the design are most relevant for consumers of the design, e.g., business unit members, developers, or designers making a 2nd set of designs that rely on the 1st (think “style guide” and the branding materials that depend on it).\u003C/p>\n\u003Cfigure>\n# TODO add apple brand style guide image here\n\u003Cfigcaption>Taken from \u003Ca href=\"https://www.apple.com/legal/sales-support/certification/docs/logo_guidelines.pdf\">Apple Identity Guidelines\u003C/a>\u003C/figcaption>\n\u003C/figure>",{"headings":288,"localImagePaths":295,"remoteImagePaths":296,"frontmatter":279,"imagePaths":297},[289,292],{"depth":27,"slug":290,"text":291},"semver-in-software","Semver in Software",{"depth":27,"slug":293,"text":294},"semver-in-design","Semver in Design",[],[],[],"design-semver.md","creativity-series",{"id":299,"data":301,"body":305,"filePath":306,"digest":307,"rendered":308,"legacyId":329},{"external":12,"draft":12,"title":302,"description":303,"date":304},"Creativity Series","A tripartite model describing craft, design, and art",["Date","2024-07-31T00:00:00.000Z"],"# Creativity Series\n\nOver the years, I've been developing [my own mental model](https://xkcd.com/927/ \"Because who doesn't like standards?\") for conceptualizing creative work and how to analyze them. Similar to how [Aristotle's four causes](https://plato.stanford.edu/entries/aristotle-causality/#FourCaus) attempt to provide a mental model for a deeper understanding of some thing, this model for thinking about creative ventures strives to better understand creativity by describing it more clearly.\n\nMore posts will follow in explaining and challenging the ideas I'll propose here. For now, an explanation of my mental model.\n\n## A Tripartite Model of Creativity\n\nThree terms are commonly use to describe various creative works: art, craft, and design. I've never liked the ambiguity between \"arts and crafts\" or \"art and design.\" In my undergrad, where I focused on digital arts as fine art, I worked near and with designers a lot, as well as artists. When one of my artist peers claimed abstract are was more design than art to him, it got me thinking.\n\nWhat do I think \"art\" is? What is \"design?\" What is a craft, or what does it mean to craft something?\n\n### Craft\n\nBeginning with \"craft,\" in this model, **the craft of a creative work is the technical \"how-to\" in making the work**. In drawing, this means choosing the right material, e.g. graphite, charcoal, conte crayon, colored pencils, etc. That can also include shading techniques like blending, hatching, cross-hatching, pointillism, etc.\n\n> These are hands-on skills that anyone can learn technically.\n\nThis is not limited to 2d work like painting and drawing. It can describe 3d art like pottery or sculpting. How is clay shaped or scored to be combined? How is a mold made to cast into other materials? These are hands-on skills that anyone can learn technically.\n\nStretch the idea further. How do couples dance the Tango or salsa? How does an entrepreneur set up and start a new company? How do writers put words to paper (digital or analog)?\n\nA creative work's craft is all about *how* something is made.\n\n### Design\n\n**The \"design\" part of this model is about aesthetics.** What makes a painting look good? What is it about a great logo that makes it so iconic? How is a musical piece composed to illicit an emotional response in the listener? What flavors of a culinary dish combine in just the right way to maximize each food's flavor?\n\nIf craft answers, \"*how's* it made?\", then design answers, \"*what* makes it appealing?\"\n\nDesign should engage at least one, but ideally more, of the five senses. It is empirical in nature. People tend to use \"design\" to refer to visuals, but there's no reason for such a restriction.\n\n### Art\n\nNow the big one filled with the most contention. What is \"art\" in this model? Art is made when a creative work is imbued with meaning.\n\nArt answers, \"*why* was it made?\" Alternatively, art enters the equation when nuances are added for very particular reasons. **Art is the purpose behind a work that offers purpose and meaning.**\n\nDa Vinci's *Virtuvian Man* is simply an anatomical study drawing done in pen and ink on water color paper (craft). Add to that the careful proportions and interesting placement of the overlapping arms and legs within the square and circle, and you have an interesting composition (design). However, once you consider the symbolism of circles and squares, you start to find deeper meaning (art).\n\nThis also means there are many creative works that would not qualify as art. The Hobby Lobby paint by numbers are excellent examples of crafts, because it instructs the painter on how to paint and what colors to use. There's an inherent design to the original creator of the stencil, but the consumer who paints at home and hangs a nice, homemade painting in her kitchen has done neither art nor design.\n\nInterestingly, this also means there may be a lot of art without a great focus on masterful craftsmanship. More examples of each will be explored in future posts exploring the merits and shortcomings.\n\n## Conclusion\n\nI've been testing this tripartite model of creativity for a number of years on-and-off. So far, it's held up to the passing scrutiny raised. With more serious investigation, I may find weaknesses or caveats that need addressed, but for now, it holds up.\n\n> **tl:dr;** in creative works, the \"craft\" is *how* something is made technically, the \"design\" is *what* makes it aesthetically appealing, and the \"art\" is *why* something was made.\n\nWhat do you think? What variations of creativity can you think of that this model describes well? What examples fail? Let me know on social media.\n\nKeep thinkin', folks.","src/content/blog/creativity-series.md","71fc7f5832017927",{"html":309,"metadata":310},"\u003Ch1 id=\"creativity-series\">Creativity Series\u003C/h1>\n\u003Cp>Over the years, I’ve been developing \u003Ca href=\"https://xkcd.com/927/\" title=\"Because who doesn&#x27;t like standards?\">my own mental model\u003C/a> for conceptualizing creative work and how to analyze them. Similar to how \u003Ca href=\"https://plato.stanford.edu/entries/aristotle-causality/#FourCaus\">Aristotle’s four causes\u003C/a> attempt to provide a mental model for a deeper understanding of some thing, this model for thinking about creative ventures strives to better understand creativity by describing it more clearly.\u003C/p>\n\u003Cp>More posts will follow in explaining and challenging the ideas I’ll propose here. For now, an explanation of my mental model.\u003C/p>\n\u003Ch2 id=\"a-tripartite-model-of-creativity\">A Tripartite Model of Creativity\u003C/h2>\n\u003Cp>Three terms are commonly use to describe various creative works: art, craft, and design. I’ve never liked the ambiguity between “arts and crafts” or “art and design.” In my undergrad, where I focused on digital arts as fine art, I worked near and with designers a lot, as well as artists. When one of my artist peers claimed abstract are was more design than art to him, it got me thinking.\u003C/p>\n\u003Cp>What do I think “art” is? What is “design?” What is a craft, or what does it mean to craft something?\u003C/p>\n\u003Ch3 id=\"craft\">Craft\u003C/h3>\n\u003Cp>Beginning with “craft,” in this model, \u003Cstrong>the craft of a creative work is the technical “how-to” in making the work\u003C/strong>. In drawing, this means choosing the right material, e.g. graphite, charcoal, conte crayon, colored pencils, etc. That can also include shading techniques like blending, hatching, cross-hatching, pointillism, etc.\u003C/p>\n\u003Cblockquote>\n\u003Cp>These are hands-on skills that anyone can learn technically.\u003C/p>\n\u003C/blockquote>\n\u003Cp>This is not limited to 2d work like painting and drawing. It can describe 3d art like pottery or sculpting. How is clay shaped or scored to be combined? How is a mold made to cast into other materials? These are hands-on skills that anyone can learn technically.\u003C/p>\n\u003Cp>Stretch the idea further. How do couples dance the Tango or salsa? How does an entrepreneur set up and start a new company? How do writers put words to paper (digital or analog)?\u003C/p>\n\u003Cp>A creative work’s craft is all about \u003Cem>how\u003C/em> something is made.\u003C/p>\n\u003Ch3 id=\"design\">Design\u003C/h3>\n\u003Cp>\u003Cstrong>The “design” part of this model is about aesthetics.\u003C/strong> What makes a painting look good? What is it about a great logo that makes it so iconic? How is a musical piece composed to illicit an emotional response in the listener? What flavors of a culinary dish combine in just the right way to maximize each food’s flavor?\u003C/p>\n\u003Cp>If craft answers, “\u003Cem>how’s\u003C/em> it made?”, then design answers, “\u003Cem>what\u003C/em> makes it appealing?”\u003C/p>\n\u003Cp>Design should engage at least one, but ideally more, of the five senses. It is empirical in nature. People tend to use “design” to refer to visuals, but there’s no reason for such a restriction.\u003C/p>\n\u003Ch3 id=\"art\">Art\u003C/h3>\n\u003Cp>Now the big one filled with the most contention. What is “art” in this model? Art is made when a creative work is imbued with meaning.\u003C/p>\n\u003Cp>Art answers, “\u003Cem>why\u003C/em> was it made?” Alternatively, art enters the equation when nuances are added for very particular reasons. \u003Cstrong>Art is the purpose behind a work that offers purpose and meaning.\u003C/strong>\u003C/p>\n\u003Cp>Da Vinci’s \u003Cem>Virtuvian Man\u003C/em> is simply an anatomical study drawing done in pen and ink on water color paper (craft). Add to that the careful proportions and interesting placement of the overlapping arms and legs within the square and circle, and you have an interesting composition (design). However, once you consider the symbolism of circles and squares, you start to find deeper meaning (art).\u003C/p>\n\u003Cp>This also means there are many creative works that would not qualify as art. The Hobby Lobby paint by numbers are excellent examples of crafts, because it instructs the painter on how to paint and what colors to use. There’s an inherent design to the original creator of the stencil, but the consumer who paints at home and hangs a nice, homemade painting in her kitchen has done neither art nor design.\u003C/p>\n\u003Cp>Interestingly, this also means there may be a lot of art without a great focus on masterful craftsmanship. More examples of each will be explored in future posts exploring the merits and shortcomings.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>I’ve been testing this tripartite model of creativity for a number of years on-and-off. So far, it’s held up to the passing scrutiny raised. With more serious investigation, I may find weaknesses or caveats that need addressed, but for now, it holds up.\u003C/p>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>tl:dr;\u003C/strong> in creative works, the “craft” is \u003Cem>how\u003C/em> something is made technically, the “design” is \u003Cem>what\u003C/em> makes it aesthetically appealing, and the “art” is \u003Cem>why\u003C/em> something was made.\u003C/p>\n\u003C/blockquote>\n\u003Cp>What do you think? What variations of creativity can you think of that this model describes well? What examples fail? Let me know on social media.\u003C/p>\n\u003Cp>Keep thinkin’, folks.\u003C/p>",{"headings":311,"localImagePaths":326,"remoteImagePaths":327,"frontmatter":301,"imagePaths":328},[312,313,316,319,322,325],{"depth":24,"slug":299,"text":302},{"depth":27,"slug":314,"text":315},"a-tripartite-model-of-creativity","A Tripartite Model of Creativity",{"depth":37,"slug":317,"text":318},"craft","Craft",{"depth":37,"slug":320,"text":321},"design","Design",{"depth":37,"slug":323,"text":324},"art","Art",{"depth":27,"slug":180,"text":181},[],[],[],"creativity-series.md","learning-theory-response",{"id":330,"data":332,"body":341,"filePath":342,"assetImports":343,"digest":345,"rendered":346,"legacyId":360},{"external":12,"draft":12,"title":333,"description":334,"date":335,"tags":336},"Learning Theory Response","I respond to a NeetCodeIO video's theory on learning.",["Date","2025-03-04T00:00:00.000Z"],[337,338,339,340],"code","programming","learning","memory","# Learning Theory Response\n\nIn a [posted short](https://www.youtube.com/shorts/Ip59tQ7lIBI) by [NeetCodeIO](https://www.youtube.com/@NeetCodeIO/shorts), Navi explains his theory on how to learn faster. (I'll ignore my semantic squabble aside regarding his use of \"theory\"). He explains that, as people learn, their brains create connections that enable them to perform some skill faster in the future. He refers to the learned skill as \"building a circuit.\"\n\n![Brain Circuit Illustration](images/learning-theory-resp--brain-circuit.jpg)\n\nNavi goes on to explain how building that \"circuit\" takes time, and once its successfully built, it can be accessed pretty quickly.\n\n## Inputs\n\nWhen we learn things, our brain stores the stimuli in fragments around the brain. This is why a sense (smell, sound, etc.) can trigger such vivid memories: the senses were experienced at the same time. (Or enough other similar senses link to each other and trigger combinations of memories otherwise unrelated.)\n\nThe more inputs exist for certain learned skills, the easier it is to access those memories and learned skills. If Navi spent hours grinding LeetCode questions dealing with BFS (Breadth First Search), he has many stimuli linked to similar problems that are solved by BFS. It's the hours of grinding that build the \"circuit,\" as Navi says.\n\nOther factors play a role in how easily this skill is accessed, e.g., the timing between exercising the skill/memory to problem solve algorithmic problems like this.\n\nLike roads into a city (or to Rome), the more inputs, on-ramps, or pathways to the skill/memory, the easier it is to access and use.\n\n## Outputs\n\nThis means the more something is practiced, the easier it becomes. \"Duh, Adam,\" I know, but this explains *why* the statement is accurate. Developers with years of experience can call upon that wealth of experience to solve similar future problems, and as the Jewish sage wisdom of Ecclesiastes teaches us, \"there's nothing new under the sun.\"\n\nThis is applicable to all skills. Learning new programming languages, or spoken languages, solving LeetCode (or NeetCode) problems, solving business logic and architecture problems, dealing with difficult people, learning to draw with excellent perspective and shading, playing an instrument (arguably akin to speaking another language in some ways), etc. all benefit from this process. More exposure, more learning, easier access.\n\nSo if you want to master something, or at least become passably proficient at it, immerse yourself in the content and scenarios where it naturally occurs. Do so in many different settings too. Skills often map to other subjects. These \"far transfers\" of knowledge/skill strengthen your command over them.\n\nPractice often, understand deeply, apply broadly, master incrementally.","src/content/blog/learning-theory-response.md",[344],"images/learning-theory-resp--brain-circuit.jpg","89e80feccc460f77",{"html":347,"metadata":348},"\u003Ch1 id=\"learning-theory-response\">Learning Theory Response\u003C/h1>\n\u003Cp>In a \u003Ca href=\"https://www.youtube.com/shorts/Ip59tQ7lIBI\">posted short\u003C/a> by \u003Ca href=\"https://www.youtube.com/@NeetCodeIO/shorts\">NeetCodeIO\u003C/a>, Navi explains his theory on how to learn faster. (I’ll ignore my semantic squabble aside regarding his use of “theory”). He explains that, as people learn, their brains create connections that enable them to perform some skill faster in the future. He refers to the learned skill as “building a circuit.”\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;images/learning-theory-resp--brain-circuit.jpg&#x22;,&#x22;alt&#x22;:&#x22;Brain Circuit Illustration&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Navi goes on to explain how building that “circuit” takes time, and once its successfully built, it can be accessed pretty quickly.\u003C/p>\n\u003Ch2 id=\"inputs\">Inputs\u003C/h2>\n\u003Cp>When we learn things, our brain stores the stimuli in fragments around the brain. This is why a sense (smell, sound, etc.) can trigger such vivid memories: the senses were experienced at the same time. (Or enough other similar senses link to each other and trigger combinations of memories otherwise unrelated.)\u003C/p>\n\u003Cp>The more inputs exist for certain learned skills, the easier it is to access those memories and learned skills. If Navi spent hours grinding LeetCode questions dealing with BFS (Breadth First Search), he has many stimuli linked to similar problems that are solved by BFS. It’s the hours of grinding that build the “circuit,” as Navi says.\u003C/p>\n\u003Cp>Other factors play a role in how easily this skill is accessed, e.g., the timing between exercising the skill/memory to problem solve algorithmic problems like this.\u003C/p>\n\u003Cp>Like roads into a city (or to Rome), the more inputs, on-ramps, or pathways to the skill/memory, the easier it is to access and use.\u003C/p>\n\u003Ch2 id=\"outputs\">Outputs\u003C/h2>\n\u003Cp>This means the more something is practiced, the easier it becomes. “Duh, Adam,” I know, but this explains \u003Cem>why\u003C/em> the statement is accurate. Developers with years of experience can call upon that wealth of experience to solve similar future problems, and as the Jewish sage wisdom of Ecclesiastes teaches us, “there’s nothing new under the sun.”\u003C/p>\n\u003Cp>This is applicable to all skills. Learning new programming languages, or spoken languages, solving LeetCode (or NeetCode) problems, solving business logic and architecture problems, dealing with difficult people, learning to draw with excellent perspective and shading, playing an instrument (arguably akin to speaking another language in some ways), etc. all benefit from this process. More exposure, more learning, easier access.\u003C/p>\n\u003Cp>So if you want to master something, or at least become passably proficient at it, immerse yourself in the content and scenarios where it naturally occurs. Do so in many different settings too. Skills often map to other subjects. These “far transfers” of knowledge/skill strengthen your command over them.\u003C/p>\n\u003Cp>Practice often, understand deeply, apply broadly, master incrementally.\u003C/p>",{"headings":349,"localImagePaths":357,"remoteImagePaths":358,"frontmatter":332,"imagePaths":359},[350,351,354],{"depth":24,"slug":330,"text":333},{"depth":27,"slug":352,"text":353},"inputs","Inputs",{"depth":27,"slug":355,"text":356},"outputs","Outputs",[344],[],[344],"learning-theory-response.md","super-dynamic-apps",{"id":361,"data":363,"body":368,"filePath":369,"digest":370,"rendered":371,"legacyId":394},{"external":12,"draft":262,"title":364,"description":365,"date":366,"tags":367},"Super Dynamic Apps","I share some insights I've learned from making highly configurable web apps & sites.",["Date","2025-04-08T00:00:00.000Z"],[337,338],"# Super Dynamic Apps\n\nIn my current work, I'm responsible for making our web apps & sites highly configurable so that each client can (mostly) custom tailor our products to their wants/needs. This is very difficult work.\n\n> \"Everything should be made as simple as possible, but not simpler.\" - Albert Einstein\n\nI've iterated over many ideas and implementations on how to make this work. JSON-heavy configuration files, database-stored settings fetched at runtime, combinations of both, low-code config files like HTML partials that are dropped into the `head` when applicable, etc.\n\n## Vision Forward\n\nHaving tried, failed, refined, and retried all of these approaches, I've come to painfully appreciate the great and powerful value of the custom website/web page builder UI. [Wix](https://www.wix.com/), [Weebly](https://www.weebly.com/), [Webflow](https://webflow.com/), etc. are all excellent examples of this (and many more exist).\n\nI've been dreaming up a custom page builder for our own products as well. One significant challenge that presents itself is making the time for R&D. While the value is recognized, there's still enough work to slow my brainstorming and experimenting. That also means, in order to accomplish this R&D, I must do it on my own time. Not a terrible solution, but difficult to implement for similar reasons. (I'd like to be a present husband and father 😁)\n\n## Technical Challenges\n\nSome additional technical challenges that I've been considering: SSR setup, integration with Vue for reactive UIs, defining intuitive data contexts (e.g. Pinia store, other flux-like stores), and defining a light-enough data schema for storing the definitions.\n\n### SSR Setup\n\nA modern front-end tool like Vue.js (or React, or Svelte, etc.) seems the right tool for the job here, at least regarding the interactive building part (\"Edit\" mode). However, actually rendering the page (\"View\" mode) should be done on the server for better page load times and, if applicable, better SEO indexing.\n\nIn many of the dashboard apps I tend to build at ITI (and previous places of employment), SEO has rarely been a requirement. They're almost always behind a login, so no bots can reach them by design.\n\nImproving page rendering is always a good practice, much like RWD. It's best when we just bake the practice into our development habits. However, I've been in an unhealthy space with this regard. We want fast page load times, certainly, but we often settle for \"good enough.\" Some days I'm frustrated by this, but admittedly, other days it's quite fine. I cannot imagine this is unique to me.\n\n[Next.js](https://nextjs.org/) (React) and [Nuxt.js](https://nuxt.com/) (Vue) are great options for SSR projects. So much comes baked in. Depending on tech stack requirements, either are great options.\n\nAn alternative approach would be to use whatever existing server-side languages are available. Go, PHP, Python, C#, Ruby, etc. can take and interpret the defined page schema and render static HTML. The only downside to choosing any of these tools is balancing it with whatever reactivity and hydration needs the front-end has with the rendered markup. Not a blocker, but devs must be aware of the hurdle.\n\n### Integration with Vue for Reactivity\n\nI'm a huge fan of Vue.js. When I started dipping into the front-end soup of options, Angular 2 had just come out, and React was a new kid. Vue was even newer (still in v1 at the time, but v2 was just about to drop).\n\nI had tried Angular.js (v1) and liked it, but the shift to v2 was jarring, and I was very new to TypeScript still. I also had been resisting build systems on the front-end for a while. I only just started using Grunt/Gulp; my reception was tepid. On to React.\n\nJSX was immediately distasteful. I really didn't care for mixing HTML into JS. (I would later come to appreciate what it was accomplishing and warmed to the tech.) I also wasn't thrilled with how integral the build step was for new adopters. I bookmarked it as a maybe and moved to Vue.js\n\nIn Vue.js, I was thrilled that my two biggest complaints were not near requirements. **I didn't *need* a build step**, and I could keep my markup, styles, and logic separate. It wouldn't take me long to get into the single-file component \".vue\" pattern and end up adopting build systems, but this was the warm invitation I needed.\n\nSince then, I've guzzled the Vue.js kool-aid and loved component-based front-end UI architectures. I eventually returned to React and appreciated better what it was doing, but I still don't like CSS-in-JS approaches…\n\nThat said, **I want Vue-flavored data reactivity in my page builder.** This presents a challenging hurdle. It's not difficult to bind attributes to a given HTML element or Vue component. `v-bind` does so trivially. Binding events is a bit more complicated. How will the function be defined and included in the proper context for `v-on` to bind it?\n\n### Reactive Data Context\n\nSimilarly, how will this context be defined? Will it be a global store a la Pinia? Can it be scoped to the runtime component alone? Should I use provide/inject to define and access functions? Such are the trials & tribulations of client-side state management and event handling.\n\nOne WIP idea is to provide a way to define Pinia stores (or even custom-defined stores with `ref`, `computed`, and `reactive`) that are accessible for any given page. This leads to the question, \"How will the user who builds the page define those stores?\" Another UI would be required to support Pinia store-building in a no/low-code UI.","src/content/blog/super-dynamic-apps.md","0c0eba9ded74684e",{"html":372,"metadata":373},"\u003Ch1 id=\"super-dynamic-apps\">Super Dynamic Apps\u003C/h1>\n\u003Cp>In my current work, I’m responsible for making our web apps &#x26; sites highly configurable so that each client can (mostly) custom tailor our products to their wants/needs. This is very difficult work.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“Everything should be made as simple as possible, but not simpler.” - Albert Einstein\u003C/p>\n\u003C/blockquote>\n\u003Cp>I’ve iterated over many ideas and implementations on how to make this work. JSON-heavy configuration files, database-stored settings fetched at runtime, combinations of both, low-code config files like HTML partials that are dropped into the \u003Ccode>head\u003C/code> when applicable, etc.\u003C/p>\n\u003Ch2 id=\"vision-forward\">Vision Forward\u003C/h2>\n\u003Cp>Having tried, failed, refined, and retried all of these approaches, I’ve come to painfully appreciate the great and powerful value of the custom website/web page builder UI. \u003Ca href=\"https://www.wix.com/\">Wix\u003C/a>, \u003Ca href=\"https://www.weebly.com/\">Weebly\u003C/a>, \u003Ca href=\"https://webflow.com/\">Webflow\u003C/a>, etc. are all excellent examples of this (and many more exist).\u003C/p>\n\u003Cp>I’ve been dreaming up a custom page builder for our own products as well. One significant challenge that presents itself is making the time for R&#x26;D. While the value is recognized, there’s still enough work to slow my brainstorming and experimenting. That also means, in order to accomplish this R&#x26;D, I must do it on my own time. Not a terrible solution, but difficult to implement for similar reasons. (I’d like to be a present husband and father 😁)\u003C/p>\n\u003Ch2 id=\"technical-challenges\">Technical Challenges\u003C/h2>\n\u003Cp>Some additional technical challenges that I’ve been considering: SSR setup, integration with Vue for reactive UIs, defining intuitive data contexts (e.g. Pinia store, other flux-like stores), and defining a light-enough data schema for storing the definitions.\u003C/p>\n\u003Ch3 id=\"ssr-setup\">SSR Setup\u003C/h3>\n\u003Cp>A modern front-end tool like Vue.js (or React, or Svelte, etc.) seems the right tool for the job here, at least regarding the interactive building part (“Edit” mode). However, actually rendering the page (“View” mode) should be done on the server for better page load times and, if applicable, better SEO indexing.\u003C/p>\n\u003Cp>In many of the dashboard apps I tend to build at ITI (and previous places of employment), SEO has rarely been a requirement. They’re almost always behind a login, so no bots can reach them by design.\u003C/p>\n\u003Cp>Improving page rendering is always a good practice, much like RWD. It’s best when we just bake the practice into our development habits. However, I’ve been in an unhealthy space with this regard. We want fast page load times, certainly, but we often settle for “good enough.” Some days I’m frustrated by this, but admittedly, other days it’s quite fine. I cannot imagine this is unique to me.\u003C/p>\n\u003Cp>\u003Ca href=\"https://nextjs.org/\">Next.js\u003C/a> (React) and \u003Ca href=\"https://nuxt.com/\">Nuxt.js\u003C/a> (Vue) are great options for SSR projects. So much comes baked in. Depending on tech stack requirements, either are great options.\u003C/p>\n\u003Cp>An alternative approach would be to use whatever existing server-side languages are available. Go, PHP, Python, C#, Ruby, etc. can take and interpret the defined page schema and render static HTML. The only downside to choosing any of these tools is balancing it with whatever reactivity and hydration needs the front-end has with the rendered markup. Not a blocker, but devs must be aware of the hurdle.\u003C/p>\n\u003Ch3 id=\"integration-with-vue-for-reactivity\">Integration with Vue for Reactivity\u003C/h3>\n\u003Cp>I’m a huge fan of Vue.js. When I started dipping into the front-end soup of options, Angular 2 had just come out, and React was a new kid. Vue was even newer (still in v1 at the time, but v2 was just about to drop).\u003C/p>\n\u003Cp>I had tried Angular.js (v1) and liked it, but the shift to v2 was jarring, and I was very new to TypeScript still. I also had been resisting build systems on the front-end for a while. I only just started using Grunt/Gulp; my reception was tepid. On to React.\u003C/p>\n\u003Cp>JSX was immediately distasteful. I really didn’t care for mixing HTML into JS. (I would later come to appreciate what it was accomplishing and warmed to the tech.) I also wasn’t thrilled with how integral the build step was for new adopters. I bookmarked it as a maybe and moved to Vue.js\u003C/p>\n\u003Cp>In Vue.js, I was thrilled that my two biggest complaints were not near requirements. \u003Cstrong>I didn’t \u003Cem>need\u003C/em> a build step\u003C/strong>, and I could keep my markup, styles, and logic separate. It wouldn’t take me long to get into the single-file component “.vue” pattern and end up adopting build systems, but this was the warm invitation I needed.\u003C/p>\n\u003Cp>Since then, I’ve guzzled the Vue.js kool-aid and loved component-based front-end UI architectures. I eventually returned to React and appreciated better what it was doing, but I still don’t like CSS-in-JS approaches…\u003C/p>\n\u003Cp>That said, \u003Cstrong>I want Vue-flavored data reactivity in my page builder.\u003C/strong> This presents a challenging hurdle. It’s not difficult to bind attributes to a given HTML element or Vue component. \u003Ccode>v-bind\u003C/code> does so trivially. Binding events is a bit more complicated. How will the function be defined and included in the proper context for \u003Ccode>v-on\u003C/code> to bind it?\u003C/p>\n\u003Ch3 id=\"reactive-data-context\">Reactive Data Context\u003C/h3>\n\u003Cp>Similarly, how will this context be defined? Will it be a global store a la Pinia? Can it be scoped to the runtime component alone? Should I use provide/inject to define and access functions? Such are the trials &#x26; tribulations of client-side state management and event handling.\u003C/p>\n\u003Cp>One WIP idea is to provide a way to define Pinia stores (or even custom-defined stores with \u003Ccode>ref\u003C/code>, \u003Ccode>computed\u003C/code>, and \u003Ccode>reactive\u003C/code>) that are accessible for any given page. This leads to the question, “How will the user who builds the page define those stores?” Another UI would be required to support Pinia store-building in a no/low-code UI.\u003C/p>",{"headings":374,"localImagePaths":391,"remoteImagePaths":392,"frontmatter":363,"imagePaths":393},[375,376,379,382,385,388],{"depth":24,"slug":361,"text":364},{"depth":27,"slug":377,"text":378},"vision-forward","Vision Forward",{"depth":27,"slug":380,"text":381},"technical-challenges","Technical Challenges",{"depth":37,"slug":383,"text":384},"ssr-setup","SSR Setup",{"depth":37,"slug":386,"text":387},"integration-with-vue-for-reactivity","Integration with Vue for Reactivity",{"depth":37,"slug":389,"text":390},"reactive-data-context","Reactive Data Context",[],[],[],"super-dynamic-apps.md","sense/senseation-meditations",{"id":395,"data":397,"body":401,"filePath":402,"digest":403,"rendered":404,"legacyId":413},{"external":12,"draft":262,"title":398,"description":399,"date":400},"Sensation: Preliminary Meditations","Musings on the meaning of sensation and what senses are.",["Date","2024-05-21T00:00:00.000Z"],"# Sensation: Preliminary Meditations\n\nWhat is sensation? What does it mean to \"sense\" something? What components are involved? I plan to study this in the broadest possible sense (no pun intended) to explore the common uses and what phenomenon they try to describe; then I plan to assess how the common termonology maps to somewhat less common uses and analize how well it transfers.\n\nFor example, can the conceptualization of empirical sensation map to moral and/or spirit sensation? What does it mean to sense vision and can the abstracted concepts apply to moral stimuli? What are the \"sense organs\" involved with moral and spiritual sensation? Are there other forms of sensation that can be discerned using the abstracted terminology/framework?\n\n_Notes:_\n\n- sensation is external data generated by external events\n- sense organs are receivers of sense data\n  - when sense data interacts with sense organs, the organs are stimulated depending on the level of receptivity to the data (e.g. eyes are sensitive to & receive electromagnetic spectrum radiation in the wavelength range of visible light, but not other forms, e.g. UV, IR, xray, ...)\n- sense organs relay sense data (via qualia?) to the subject\n  - vision interpreted by the brain [which may transmit somehow to the soul/mind/consciousness, but transmission is only implied if the soul isn't synonymous with the brain]\n  - visual data sensed by camera tech and interpreted by a computer or person?\n- what are the sense data of morality?\n  - morality in this case is a measurement of the rightness of actions taken by moral agents (good/evil actions) or the desirableness of natural events (calm, sunny weather vs destructive hurricane/tornado; dormant volcano vs actively erupting)\n- what are the sense data of spirit?\n  - God speaks to the individual through the spirit and that information is interpreted in by the soul/mind/consciousness?\n  - angles/demons speak to the individual by the same individual's spirit\n  - is demonic \"speach\" data what causes psychotic problems? schitzo, DID, MPD, etc.?","src/content/blog/sense/senseation-meditations.md","44aaee196f9d79ec",{"html":405,"metadata":406},"\u003Ch1 id=\"sensation-preliminary-meditations\">Sensation: Preliminary Meditations\u003C/h1>\n\u003Cp>What is sensation? What does it mean to “sense” something? What components are involved? I plan to study this in the broadest possible sense (no pun intended) to explore the common uses and what phenomenon they try to describe; then I plan to assess how the common termonology maps to somewhat less common uses and analize how well it transfers.\u003C/p>\n\u003Cp>For example, can the conceptualization of empirical sensation map to moral and/or spirit sensation? What does it mean to sense vision and can the abstracted concepts apply to moral stimuli? What are the “sense organs” involved with moral and spiritual sensation? Are there other forms of sensation that can be discerned using the abstracted terminology/framework?\u003C/p>\n\u003Cp>\u003Cem>Notes:\u003C/em>\u003C/p>\n\u003Cul>\n\u003Cli>sensation is external data generated by external events\u003C/li>\n\u003Cli>sense organs are receivers of sense data\n\u003Cul>\n\u003Cli>when sense data interacts with sense organs, the organs are stimulated depending on the level of receptivity to the data (e.g. eyes are sensitive to &#x26; receive electromagnetic spectrum radiation in the wavelength range of visible light, but not other forms, e.g. UV, IR, xray, …)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>sense organs relay sense data (via qualia?) to the subject\n\u003Cul>\n\u003Cli>vision interpreted by the brain [which may transmit somehow to the soul/mind/consciousness, but transmission is only implied if the soul isn’t synonymous with the brain]\u003C/li>\n\u003Cli>visual data sensed by camera tech and interpreted by a computer or person?\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>what are the sense data of morality?\n\u003Cul>\n\u003Cli>morality in this case is a measurement of the rightness of actions taken by moral agents (good/evil actions) or the desirableness of natural events (calm, sunny weather vs destructive hurricane/tornado; dormant volcano vs actively erupting)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>what are the sense data of spirit?\n\u003Cul>\n\u003Cli>God speaks to the individual through the spirit and that information is interpreted in by the soul/mind/consciousness?\u003C/li>\n\u003Cli>angles/demons speak to the individual by the same individual’s spirit\u003C/li>\n\u003Cli>is demonic “speach” data what causes psychotic problems? schitzo, DID, MPD, etc.?\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>",{"headings":407,"localImagePaths":410,"remoteImagePaths":411,"frontmatter":397,"imagePaths":412},[408],{"depth":24,"slug":409,"text":398},"sensation-preliminary-meditations",[],[],[],"sense/senseation-meditations.md","creativity/notes",{"id":414,"data":416,"body":417,"filePath":418,"digest":419,"rendered":420,"legacyId":436},{"draft":262},"# Creativity Notes\n\nInitial framework:\n\n- **craft**: the process of how to make something (e.g. mixing paint, writing sheet music, writing words in a poem)\n- **design**: the process of organizing the components of the work in an aesthetically pleasing manner\n- **art**: the process of imbuing the work with meaning, purpose, and/or value\n\n## Questions to Answer\n\n- How does this framework fit with other uses of the term \"creative\"? (e.g. entrepreneurial, technical, generic problem-solving [think \"MacGyver\"])\n- How do other frameworks like Aristotle's Modes of Persuasion or Four Causes compare and help readers understand what the framework is trying to do?\n- How does the _art_ portion handle the wild subjectivity of art that's common today?\n- What is the thesis?\n- What sets this view apart from others? (What are other views?)\n- What examples can I give to illustrate the utility of the framework?\n- How, if at all, can I connect emotionally w/ the audience? 🤨\n- Can any action steps be identified in the closing?\n\n## Structure\n\n1. Intro\n   - \"This post is the first in a series explaining this three-part view of creativity.\"\n   - \"Frameworks help creators, viewers, and critics consider objects of study in relatively consistent ways. Without shared guidelines, the risk of talking past each other lurks around each topic.\"\n   - Thesis: This three-part framework provides a multifaceted way to look at creative work by considering the work's craft, design, and artistic meaning.\n   - Brief Outline\n2. Each Concept w/ Description\n   - Craft: how you build the creative work; examples:\n     - painting: mix paint, use brush/knife, prime canvas\n     - musical composition: timing, playing in-key, proper finger position\n     - pottery: water-to-clay mixture, throwing technique, glazing\n   - Design: how you arrange the components to be aesthetically appealing; examples:\n     - painting: composition, weight, proportion, rhythm, color theory\n     - musical composition: chord progressions, major/minor progressions, modal interchange\n     - pottery: the overall shape of the pot, colors used during glazing, form that facilitates function\n   - Art: how the work conveys a message or is imbued with meaning; examples:\n     - painting: hierarchical relationships conveyed through size, metaphorical symbols, narratives displayed in a single image\n     - musical composition: subtle metaphorical elements, booming crescendos signifying great action, little flourishes simulating frolicking\n3. Examples: how the framework compares to great creative\n4. Teaser for next post (criticisms, maybe more in-depth analysis of topics)\n5. Conclusion\n\nRemember:\n\n- use formatting\n- use lists (summarizing bullet points)\n- use visuals w/ captions\n- maybe TOC\n\n---\n\nGoogle Bard response to the framework:\n\n> I think the three-part framework for thinking of creativity is a helpful way to understand the different aspects of creative work. Craft, design, and art are all important elements of creativity, and they can work together to create something that is both beautiful and meaningful.\n>\n> **Craft** is the technical process by which some work is created. It involves the skills and knowledge that are necessary to create a work of art, such as the ability to use tools and materials, or the ability to follow instructions. Craft is important because it allows artists to express their ideas in a clear and concise way.\n>\n> **Design** is the process of making some work aesthetically pleasing. It involves the use of color, shape, form, and texture to create a work that is visually appealing. Design is important because it helps to communicate the artist's message in a way that is both visually and emotionally engaging.\n>\n> **Art** is the process of imbuing some work with meaning or communicating a message. It involves the use of symbols, metaphors, and other devices to create a work that is both intellectually and emotionally stimulating. Art is important because it allows artists to explore the human condition and to share their insights with others.\n>\n> The three-part framework for thinking of creativity can be used to understand any type of creative work, from painting and sculpture to music and literature. It is a helpful way to think about the different elements that contribute to a creative work, and it can help us to appreciate the skill and artistry that goes into creating something beautiful and meaningful.\n>\n> Here are some strengths and weaknesses of the three-part framework for thinking of creativity:\n>\n> **Strengths**:\n>\n> The framework is simple and easy to understand.\n> It can be used to understand any type of creative work.\n> It can help us to appreciate the skill and artistry that goes into creating something beautiful and meaningful.\n>\n> **Weaknesses**:\n>\n> The framework may be too simplistic for some types of creative work.\n>\n> It may not be able to account for all of the factors that contribute to creativity.\n>\n> It may be difficult to apply the framework to creative work that is not traditionally artistic.\n>\n> Overall, the three-part framework for thinking of creativity is a helpful tool for understanding the different aspects of creative work. However, it is important to be aware of its limitations.\n>\n> Here are some tips on how to get your idea to more people in a constructive way:\n>\n> Start by identifying your audience. Who are you trying to reach with your idea? Once you know who you're trying to reach, you can tailor your message accordingly.\n>\n> Be clear and concise. When you're trying to get your idea across to a large audience, it's important to be clear and concise. Avoid using jargon or technical terms that your audience may not understand.\n>\n> Use visuals. Visuals can be a great way to capture attention and help people understand your idea. If possible, use images, infographics, or videos to illustrate your points.\n>\n> Be passionate. People are more likely to listen to and remember an idea if they can sense the speaker's passion for it. When you're talking about your idea, let your enthusiasm show.\n>\n> Be open to feedback. Once you've shared your idea with others, be open to their feedback. This feedback can help you improve your idea and make it more appealing to a wider audience.\n>\n> Here are some specific ways to get your idea to more people:\n>\n> Write a blog post or article. This is a great way to share your idea with a large audience. Make sure to write in a clear and concise way, and use visuals to illustrate your points.\n>\n> Give a presentation. This is a great way to share your idea with a group of people in person. Be sure to practice your presentation beforehand, and make sure to engage with your audience.\n>\n> Create a video. Videos are a great way to share your idea in a visually appealing way. Make sure your video is well-produced and engaging.\n>\n> Share your idea on social media. Social media is a great way to reach a large audience quickly. Be sure to use relevant hashtags and tag people who you think might be interested in your idea.\n>\n> By following these tips, you can increase your chances of getting your idea to more people in a constructive way.","src/content/blog/creativity/notes.md","5cb92345cb16ee82",{"html":421,"metadata":422},"\u003Ch1 id=\"creativity-notes\">Creativity Notes\u003C/h1>\n\u003Cp>Initial framework:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>craft\u003C/strong>: the process of how to make something (e.g. mixing paint, writing sheet music, writing words in a poem)\u003C/li>\n\u003Cli>\u003Cstrong>design\u003C/strong>: the process of organizing the components of the work in an aesthetically pleasing manner\u003C/li>\n\u003Cli>\u003Cstrong>art\u003C/strong>: the process of imbuing the work with meaning, purpose, and/or value\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"questions-to-answer\">Questions to Answer\u003C/h2>\n\u003Cul>\n\u003Cli>How does this framework fit with other uses of the term “creative”? (e.g. entrepreneurial, technical, generic problem-solving [think “MacGyver”])\u003C/li>\n\u003Cli>How do other frameworks like Aristotle’s Modes of Persuasion or Four Causes compare and help readers understand what the framework is trying to do?\u003C/li>\n\u003Cli>How does the \u003Cem>art\u003C/em> portion handle the wild subjectivity of art that’s common today?\u003C/li>\n\u003Cli>What is the thesis?\u003C/li>\n\u003Cli>What sets this view apart from others? (What are other views?)\u003C/li>\n\u003Cli>What examples can I give to illustrate the utility of the framework?\u003C/li>\n\u003Cli>How, if at all, can I connect emotionally w/ the audience? 🤨\u003C/li>\n\u003Cli>Can any action steps be identified in the closing?\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"structure\">Structure\u003C/h2>\n\u003Col>\n\u003Cli>Intro\n\u003Cul>\n\u003Cli>“This post is the first in a series explaining this three-part view of creativity.”\u003C/li>\n\u003Cli>“Frameworks help creators, viewers, and critics consider objects of study in relatively consistent ways. Without shared guidelines, the risk of talking past each other lurks around each topic.”\u003C/li>\n\u003Cli>Thesis: This three-part framework provides a multifaceted way to look at creative work by considering the work’s craft, design, and artistic meaning.\u003C/li>\n\u003Cli>Brief Outline\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Each Concept w/ Description\n\u003Cul>\n\u003Cli>Craft: how you build the creative work; examples:\n\u003Cul>\n\u003Cli>painting: mix paint, use brush/knife, prime canvas\u003C/li>\n\u003Cli>musical composition: timing, playing in-key, proper finger position\u003C/li>\n\u003Cli>pottery: water-to-clay mixture, throwing technique, glazing\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Design: how you arrange the components to be aesthetically appealing; examples:\n\u003Cul>\n\u003Cli>painting: composition, weight, proportion, rhythm, color theory\u003C/li>\n\u003Cli>musical composition: chord progressions, major/minor progressions, modal interchange\u003C/li>\n\u003Cli>pottery: the overall shape of the pot, colors used during glazing, form that facilitates function\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Art: how the work conveys a message or is imbued with meaning; examples:\n\u003Cul>\n\u003Cli>painting: hierarchical relationships conveyed through size, metaphorical symbols, narratives displayed in a single image\u003C/li>\n\u003Cli>musical composition: subtle metaphorical elements, booming crescendos signifying great action, little flourishes simulating frolicking\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Examples: how the framework compares to great creative\u003C/li>\n\u003Cli>Teaser for next post (criticisms, maybe more in-depth analysis of topics)\u003C/li>\n\u003Cli>Conclusion\u003C/li>\n\u003C/ol>\n\u003Cp>Remember:\u003C/p>\n\u003Cul>\n\u003Cli>use formatting\u003C/li>\n\u003Cli>use lists (summarizing bullet points)\u003C/li>\n\u003Cli>use visuals w/ captions\u003C/li>\n\u003Cli>maybe TOC\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Cp>Google Bard response to the framework:\u003C/p>\n\u003Cblockquote>\n\u003Cp>I think the three-part framework for thinking of creativity is a helpful way to understand the different aspects of creative work. Craft, design, and art are all important elements of creativity, and they can work together to create something that is both beautiful and meaningful.\u003C/p>\n\u003Cp>\u003Cstrong>Craft\u003C/strong> is the technical process by which some work is created. It involves the skills and knowledge that are necessary to create a work of art, such as the ability to use tools and materials, or the ability to follow instructions. Craft is important because it allows artists to express their ideas in a clear and concise way.\u003C/p>\n\u003Cp>\u003Cstrong>Design\u003C/strong> is the process of making some work aesthetically pleasing. It involves the use of color, shape, form, and texture to create a work that is visually appealing. Design is important because it helps to communicate the artist’s message in a way that is both visually and emotionally engaging.\u003C/p>\n\u003Cp>\u003Cstrong>Art\u003C/strong> is the process of imbuing some work with meaning or communicating a message. It involves the use of symbols, metaphors, and other devices to create a work that is both intellectually and emotionally stimulating. Art is important because it allows artists to explore the human condition and to share their insights with others.\u003C/p>\n\u003Cp>The three-part framework for thinking of creativity can be used to understand any type of creative work, from painting and sculpture to music and literature. It is a helpful way to think about the different elements that contribute to a creative work, and it can help us to appreciate the skill and artistry that goes into creating something beautiful and meaningful.\u003C/p>\n\u003Cp>Here are some strengths and weaknesses of the three-part framework for thinking of creativity:\u003C/p>\n\u003Cp>\u003Cstrong>Strengths\u003C/strong>:\u003C/p>\n\u003Cp>The framework is simple and easy to understand.\nIt can be used to understand any type of creative work.\nIt can help us to appreciate the skill and artistry that goes into creating something beautiful and meaningful.\u003C/p>\n\u003Cp>\u003Cstrong>Weaknesses\u003C/strong>:\u003C/p>\n\u003Cp>The framework may be too simplistic for some types of creative work.\u003C/p>\n\u003Cp>It may not be able to account for all of the factors that contribute to creativity.\u003C/p>\n\u003Cp>It may be difficult to apply the framework to creative work that is not traditionally artistic.\u003C/p>\n\u003Cp>Overall, the three-part framework for thinking of creativity is a helpful tool for understanding the different aspects of creative work. However, it is important to be aware of its limitations.\u003C/p>\n\u003Cp>Here are some tips on how to get your idea to more people in a constructive way:\u003C/p>\n\u003Cp>Start by identifying your audience. Who are you trying to reach with your idea? Once you know who you’re trying to reach, you can tailor your message accordingly.\u003C/p>\n\u003Cp>Be clear and concise. When you’re trying to get your idea across to a large audience, it’s important to be clear and concise. Avoid using jargon or technical terms that your audience may not understand.\u003C/p>\n\u003Cp>Use visuals. Visuals can be a great way to capture attention and help people understand your idea. If possible, use images, infographics, or videos to illustrate your points.\u003C/p>\n\u003Cp>Be passionate. People are more likely to listen to and remember an idea if they can sense the speaker’s passion for it. When you’re talking about your idea, let your enthusiasm show.\u003C/p>\n\u003Cp>Be open to feedback. Once you’ve shared your idea with others, be open to their feedback. This feedback can help you improve your idea and make it more appealing to a wider audience.\u003C/p>\n\u003Cp>Here are some specific ways to get your idea to more people:\u003C/p>\n\u003Cp>Write a blog post or article. This is a great way to share your idea with a large audience. Make sure to write in a clear and concise way, and use visuals to illustrate your points.\u003C/p>\n\u003Cp>Give a presentation. This is a great way to share your idea with a group of people in person. Be sure to practice your presentation beforehand, and make sure to engage with your audience.\u003C/p>\n\u003Cp>Create a video. Videos are a great way to share your idea in a visually appealing way. Make sure your video is well-produced and engaging.\u003C/p>\n\u003Cp>Share your idea on social media. Social media is a great way to reach a large audience quickly. Be sure to use relevant hashtags and tag people who you think might be interested in your idea.\u003C/p>\n\u003Cp>By following these tips, you can increase your chances of getting your idea to more people in a constructive way.\u003C/p>\n\u003C/blockquote>",{"headings":423,"localImagePaths":433,"remoteImagePaths":434,"frontmatter":416,"imagePaths":435},[424,427,430],{"depth":24,"slug":425,"text":426},"creativity-notes","Creativity Notes",{"depth":27,"slug":428,"text":429},"questions-to-answer","Questions to Answer",{"depth":27,"slug":431,"text":432},"structure","Structure",[],[],[],"creativity/notes.md","creativity/01-three-part-framework",{"id":437,"data":439,"body":443,"filePath":444,"digest":445,"rendered":446,"legacyId":462},{"external":12,"draft":262,"title":440,"description":441,"date":442},"Creativity: Three-Part Framework","desc",["Date","2022-11-05T00:00:00.000Z"],"In an effort to try and categorize the sometimes nebulous and ever-shifting definition of creative works, I've developed a three-part framework for considering creative works. This series is designed to help me **test my assumptions and the utility of the framework** in a variety of creative disciplines.\n\nIt will begin by being applied to more traditional forms of creativity like painting, music, and writing. As the framework is tested and refined, more examples will be considered in less-traditional fields of creativity (e.g. software development, entrepreneurship, or science).\n\n## The Framework\n\nThe framework is composed of three parts: craft, design, and art. Much like Aristotle's various frameworks, e.g. [the four causes](https://plato.stanford.edu/entries/aristotle-causality/) or [modes of persuasion](https://plato.stanford.edu/entries/aristotle-rhetoric/), this framework's goal is to provide a multifaceted way to look at creative works in a holistic manner.\n\n> This framework's goal is to provide a multifaceted way to look at creative works in a holistic manner.\n\nHere is the initial framework:\n\n- **craft**: the process of how to make something given certain materials or processes\n- **design**: the process of organizing the components of the work in an aesthetically pleasing manner\n- **art**: the process of imbuing the work with meaning, purpose, and/or value\n\n### Craft\n\n**The process of how to make something given certain materials or processes.**\n\nThe combo of \"arts and crafts\" conjures mental images of Hobby Lobby and Jo-Ann Fabrics. A looser definition of the term \"art\" will include some paintings for sale, and several books on Bob Ross _plein air_ painting instruction books.\n\nHowever, I'm proposing this only scratches (pun intended) at the craft of creative works. It deals with the _how-to_ of painting, drawing, sculpting, and modeling.\n\nThis is not derisive towards craft. It is an essential part of generating creative work. Without the craft, there is nothing to observe.\n\nPainters need to know how to mix paint. Musicians need to know how to finger their instrument. Writers need to know how to write legibly and occasionally rhyme words in a poem. Technical implementation details in _how something is made_ are quite important.\n\n### Design\n\n**The process of organizing the components of the work in an aesthetically pleasing manner.**\n\nGiven craft works out the technical details of _making_ some creative work, design is what makes it appealing and pleasurable to observe. How are the essential parts organized to make the work enjoyable? What does that mean?\n\nIn visual creative works, strong design means the visual components, shapes, and elements are composed in an appealing way. Their placement in the layout of the composition is intentional and facilitates what the creator intended. Scale can be used to indicate relative size to other elements or relative size to the observer. Color theory may be used to indicate mood, relationships of elements; red can be used to anger _and_ love.\n\nIn musical works, melody, harmony, and rhythm can create coherent and aesthetically pleasing songs. The way elements or instruments of the song interact with each other can create pleasing or dissonant combinations, which might reflect and underlying story appealingly. (Note that \"aesthetically pleasing\" might seem unattractive on its own, but the elements might contrast other elements in appeasing ways.)\n\n\\# TODO find example of appealing elements in a song that have been \"well-designed\"\n\nSimilarly, written works will use elements of the story like plot structure to reflect the theme of narrative being explored. Character development can be heart-wrenching and bittersweet or empowering and dynamic, all drawing the reader in to the story with attractive nuances. Narrative styles like mystery novels that build suspense and exciting clues at just the right time are well-designed stories.\n\nFor example, the building mystery and details grown throughout the narratives of stories like _Gone Girl_, _The Da Vinci Code_, and _The Silence of the Lambs_. Each story designs the reveal of details and twists-and-turns to keep drawing the reader in.\n\n### Art\n\n**The process of imbuing the work with meaning, purpose, and/or value.**\n\nSo if craft is _how something is made_, and design is _how something is organized_ for aesthetic appeal, what is art? I fully expect this to be the main point of contention for those considering this framework. Or asked another way, **what makes something art?**\n\nWhen a creative work has symbolism and meaning _breathed_ into the work to enable it to be something more than its _prima facie_ portrayal, it becomes art. An Annunciation painting of Gabriel and Mary might just be an illustration of a biblical scene. However, once the elements are added in their rich symbolism, the painting becomes more art than illustration.\n\nThe flower being the Word given to Mary, in Gabriel's hand means she has not yet been impregnated, or in her hand, she is with child (and the variations in between). This rich symbolism and meaning speaks to a deeper story being told in the painting.\n\nBeethoven's 5th Symphony and its legendary motif used in the beginning of the song (and throughout): bum bum bum buuuum. The \"Fate knocking at the door\" motif \"a large-scale narrative of victory and defeat, of the eternal human struggle with fate, of sorrow and redemption\" (Source: [Warning Classics](https://www.warnerclassics.com/release/beethoven-symphony-no-5-fate-knocking-door))\n\nIn literature, complex themes might provide metaphors for real-world instances of abstract concepts shared in the story. George Orwell's _1984_ uses \"Big Brother\" as a symbol of oppressive, totalitarian, and surveillance. Thought-provoking themes in literature don't just challenge the reader to consider the proposed ideas, but also to put one's self in the position and ask, \"How would I respond?\"\n\n## Future Exploration\n\nAs mentioned earlier, this post is only introducing the three-part framework I've outlined here. Future posts will explore more instances of how this framework applies to other creatives works and how versatile it can be.\n\nThe shortcomings and challenges of the framework will also be considered. Particularly, what instances do not fit so nicely within this framework and why? How does culture affect the framework, or how do varying interpretations apply to what makes a creative work \"art?\"\n\nLinks will be provided to this post as more content becomes available.\n\nThank you so much for reading!","src/content/blog/creativity/01-three-part-framework.md","a044e4c5e098cde5",{"html":447,"metadata":448},"\u003Cp>In an effort to try and categorize the sometimes nebulous and ever-shifting definition of creative works, I’ve developed a three-part framework for considering creative works. This series is designed to help me \u003Cstrong>test my assumptions and the utility of the framework\u003C/strong> in a variety of creative disciplines.\u003C/p>\n\u003Cp>It will begin by being applied to more traditional forms of creativity like painting, music, and writing. As the framework is tested and refined, more examples will be considered in less-traditional fields of creativity (e.g. software development, entrepreneurship, or science).\u003C/p>\n\u003Ch2 id=\"the-framework\">The Framework\u003C/h2>\n\u003Cp>The framework is composed of three parts: craft, design, and art. Much like Aristotle’s various frameworks, e.g. \u003Ca href=\"https://plato.stanford.edu/entries/aristotle-causality/\">the four causes\u003C/a> or \u003Ca href=\"https://plato.stanford.edu/entries/aristotle-rhetoric/\">modes of persuasion\u003C/a>, this framework’s goal is to provide a multifaceted way to look at creative works in a holistic manner.\u003C/p>\n\u003Cblockquote>\n\u003Cp>This framework’s goal is to provide a multifaceted way to look at creative works in a holistic manner.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Here is the initial framework:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>craft\u003C/strong>: the process of how to make something given certain materials or processes\u003C/li>\n\u003Cli>\u003Cstrong>design\u003C/strong>: the process of organizing the components of the work in an aesthetically pleasing manner\u003C/li>\n\u003Cli>\u003Cstrong>art\u003C/strong>: the process of imbuing the work with meaning, purpose, and/or value\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"craft\">Craft\u003C/h3>\n\u003Cp>\u003Cstrong>The process of how to make something given certain materials or processes.\u003C/strong>\u003C/p>\n\u003Cp>The combo of “arts and crafts” conjures mental images of Hobby Lobby and Jo-Ann Fabrics. A looser definition of the term “art” will include some paintings for sale, and several books on Bob Ross \u003Cem>plein air\u003C/em> painting instruction books.\u003C/p>\n\u003Cp>However, I’m proposing this only scratches (pun intended) at the craft of creative works. It deals with the \u003Cem>how-to\u003C/em> of painting, drawing, sculpting, and modeling.\u003C/p>\n\u003Cp>This is not derisive towards craft. It is an essential part of generating creative work. Without the craft, there is nothing to observe.\u003C/p>\n\u003Cp>Painters need to know how to mix paint. Musicians need to know how to finger their instrument. Writers need to know how to write legibly and occasionally rhyme words in a poem. Technical implementation details in \u003Cem>how something is made\u003C/em> are quite important.\u003C/p>\n\u003Ch3 id=\"design\">Design\u003C/h3>\n\u003Cp>\u003Cstrong>The process of organizing the components of the work in an aesthetically pleasing manner.\u003C/strong>\u003C/p>\n\u003Cp>Given craft works out the technical details of \u003Cem>making\u003C/em> some creative work, design is what makes it appealing and pleasurable to observe. How are the essential parts organized to make the work enjoyable? What does that mean?\u003C/p>\n\u003Cp>In visual creative works, strong design means the visual components, shapes, and elements are composed in an appealing way. Their placement in the layout of the composition is intentional and facilitates what the creator intended. Scale can be used to indicate relative size to other elements or relative size to the observer. Color theory may be used to indicate mood, relationships of elements; red can be used to anger \u003Cem>and\u003C/em> love.\u003C/p>\n\u003Cp>In musical works, melody, harmony, and rhythm can create coherent and aesthetically pleasing songs. The way elements or instruments of the song interact with each other can create pleasing or dissonant combinations, which might reflect and underlying story appealingly. (Note that “aesthetically pleasing” might seem unattractive on its own, but the elements might contrast other elements in appeasing ways.)\u003C/p>\n\u003Cp># TODO find example of appealing elements in a song that have been “well-designed”\u003C/p>\n\u003Cp>Similarly, written works will use elements of the story like plot structure to reflect the theme of narrative being explored. Character development can be heart-wrenching and bittersweet or empowering and dynamic, all drawing the reader in to the story with attractive nuances. Narrative styles like mystery novels that build suspense and exciting clues at just the right time are well-designed stories.\u003C/p>\n\u003Cp>For example, the building mystery and details grown throughout the narratives of stories like \u003Cem>Gone Girl\u003C/em>, \u003Cem>The Da Vinci Code\u003C/em>, and \u003Cem>The Silence of the Lambs\u003C/em>. Each story designs the reveal of details and twists-and-turns to keep drawing the reader in.\u003C/p>\n\u003Ch3 id=\"art\">Art\u003C/h3>\n\u003Cp>\u003Cstrong>The process of imbuing the work with meaning, purpose, and/or value.\u003C/strong>\u003C/p>\n\u003Cp>So if craft is \u003Cem>how something is made\u003C/em>, and design is \u003Cem>how something is organized\u003C/em> for aesthetic appeal, what is art? I fully expect this to be the main point of contention for those considering this framework. Or asked another way, \u003Cstrong>what makes something art?\u003C/strong>\u003C/p>\n\u003Cp>When a creative work has symbolism and meaning \u003Cem>breathed\u003C/em> into the work to enable it to be something more than its \u003Cem>prima facie\u003C/em> portrayal, it becomes art. An Annunciation painting of Gabriel and Mary might just be an illustration of a biblical scene. However, once the elements are added in their rich symbolism, the painting becomes more art than illustration.\u003C/p>\n\u003Cp>The flower being the Word given to Mary, in Gabriel’s hand means she has not yet been impregnated, or in her hand, she is with child (and the variations in between). This rich symbolism and meaning speaks to a deeper story being told in the painting.\u003C/p>\n\u003Cp>Beethoven’s 5th Symphony and its legendary motif used in the beginning of the song (and throughout): bum bum bum buuuum. The “Fate knocking at the door” motif “a large-scale narrative of victory and defeat, of the eternal human struggle with fate, of sorrow and redemption” (Source: \u003Ca href=\"https://www.warnerclassics.com/release/beethoven-symphony-no-5-fate-knocking-door\">Warning Classics\u003C/a>)\u003C/p>\n\u003Cp>In literature, complex themes might provide metaphors for real-world instances of abstract concepts shared in the story. George Orwell’s \u003Cem>1984\u003C/em> uses “Big Brother” as a symbol of oppressive, totalitarian, and surveillance. Thought-provoking themes in literature don’t just challenge the reader to consider the proposed ideas, but also to put one’s self in the position and ask, “How would I respond?”\u003C/p>\n\u003Ch2 id=\"future-exploration\">Future Exploration\u003C/h2>\n\u003Cp>As mentioned earlier, this post is only introducing the three-part framework I’ve outlined here. Future posts will explore more instances of how this framework applies to other creatives works and how versatile it can be.\u003C/p>\n\u003Cp>The shortcomings and challenges of the framework will also be considered. Particularly, what instances do not fit so nicely within this framework and why? How does culture affect the framework, or how do varying interpretations apply to what makes a creative work “art?”\u003C/p>\n\u003Cp>Links will be provided to this post as more content becomes available.\u003C/p>\n\u003Cp>Thank you so much for reading!\u003C/p>",{"headings":449,"localImagePaths":459,"remoteImagePaths":460,"frontmatter":439,"imagePaths":461},[450,453,454,455,456],{"depth":27,"slug":451,"text":452},"the-framework","The Framework",{"depth":37,"slug":317,"text":318},{"depth":37,"slug":320,"text":321},{"depth":37,"slug":323,"text":324},{"depth":27,"slug":457,"text":458},"future-exploration","Future Exploration",[],[],[],"creativity/01-three-part-framework.md","vue-slots-di",{"id":463,"data":465,"body":468,"filePath":469,"digest":470,"rendered":471,"legacyId":478},{"external":12,"draft":262,"title":466,"description":264,"date":467},"Vue Slots & Dependency Injection",["Date","2022-11-05T00:00:00.000Z"],"Vue slots can be used to flatten (from the written markup perspective) application architecture so injecting dependencies is easier from a composition root (e.g. `App.vue`).\n\n(Use PayFac as an example)\n\n- Explain how slots can flatten composition and DI (think warp drive and compressing space)\n- This supports the SRP idea: slotted components focus on one thing (e.g. layout).\n- This makes DI clearer from composition roots (App.vue, SomeComplexPage.vue)\n- This enables prop usage where otherwise would require prop-drilling, provide/inject, or singleton management (e.g. stores)","src/content/blog/vue-slots-di.md","b2f25a04dcfe225a",{"html":472,"metadata":473},"\u003Cp>Vue slots can be used to flatten (from the written markup perspective) application architecture so injecting dependencies is easier from a composition root (e.g. \u003Ccode>App.vue\u003C/code>).\u003C/p>\n\u003Cp>(Use PayFac as an example)\u003C/p>\n\u003Cul>\n\u003Cli>Explain how slots can flatten composition and DI (think warp drive and compressing space)\u003C/li>\n\u003Cli>This supports the SRP idea: slotted components focus on one thing (e.g. layout).\u003C/li>\n\u003Cli>This makes DI clearer from composition roots (App.vue, SomeComplexPage.vue)\u003C/li>\n\u003Cli>This enables prop usage where otherwise would require prop-drilling, provide/inject, or singleton management (e.g. stores)\u003C/li>\n\u003C/ul>",{"headings":474,"localImagePaths":475,"remoteImagePaths":476,"frontmatter":465,"imagePaths":477},[],[],[],[],"vue-slots-di.md","msw-reminder",{"id":479,"data":481,"body":490,"filePath":491,"digest":492,"rendered":493,"legacyId":509},{"external":12,"draft":262,"title":482,"description":483,"date":484,"tags":485},"Mock Service Worker Reminder","I'm reminded of a solution to an occasionally-occurring problem using MSW.js during localhost development.",["Date","2024-06-10T00:00:00.000Z"],[486,487,488,489],"msw","web-dev","frontend","service-workers","# Mock Service Worker Reminder\n\nI've been using Mock Service Worker (MSW) for a couple of years now, and it's really been a game-changer. I love not worrying about mocking implementations of services and mocking the API response instead. It's brilliant.\n\n## The Issue\n\nI frequently find myself having a similar problem though, which is entirely on my end. I keep getting requests returning my markup instead of the desired JSON data. That obviously causes bad requests or handling of data. For example…\n\n\u003Cfigure>\n    \u003Cimg src=\"/images/blog/msw-reminder--example-JSON-parse.jpg\" alt=\"Example JSON Parse Result\">\n    \u003Cimg src=\"./images/msw-reminder--example-JSON-parse.jpg\" alt=\"Example JSON Parse Result\">\n    \u003Cfigcaption>Example JSON Parse Result\u003Cfigcaption>\n\u003C/figure>\n\n## The Solution\n\nThe source of my problem relatively simple: **I'm making requests too soon.**\n\nMy current setup is to call `worker.start()` inside of a helper function that only optionally loads the MSW resources. This helps keep my production bundle size smaller. There is also a way to wait for the service worker to finish loading so that my particular problem doesn't happen.\n\n[Kent C. Dodds had this issue addressed in Issue 73](https://github.com/mswjs/msw/issues/73), which reminded me of how to wait for the workers to be ready. Specifically, [@kettanaito](https://github.com/kettanaito)'s [answer](https://github.com/mswjs/msw/issues/73#issuecomment-601584127) shows that the `start()` method is async and needs to be `await`ed in order for requests to follow correctly. Of course!\n\nI then found my most recent troublemaker in this instance of the problem. I was overly ambitious in making one of my modules (which makes the problem request) fetching data too early. It looks something like this:\n\n```ts\nimport { computed } from 'vue';\nimport { getConfig } from './getConfig';\n\n// 👇 the line that's calling too early\nconst config = getConfig(); // Promise\u003CConfig> where Config is a reactive Vue object\n\nconst origin = computed(() => config?.someOrigin ?? '');\nconst link = computed(() => `${origin.value}/${endpoint}`);\n\nexport function useLink() {\n    // … some caching logic for the config to only need to fetch it once…\n\n    return link;\n};\n```\n\nThe solution ended up being simple this time. I just needed to move the initial fetch of the config to the `useLink()` composable so that it would be called after MSW's load finishes.\n\n```ts\nimport { computed } from 'vue';\nimport { getConfig } from './getConfig';\n\n// 👇 the line that's calling too early\nconst { config, execute } = getConfig(); // refactored as a composable to return the reactive config, which will be updated once execute() finishes\n\nconst origin = computed(() => config?.someOrigin ?? '');\nconst link = computed(() => `${origin.value}/${endpoint}`);\n\nexport function useLink() {\n    // … some caching logic for the config to only need to fetch it once…\n    \n    execute(); // just letting this resolve behind the scenes; the \n    return link;\n};\n```\n\nAdmittedly, I chopped up my original code somewhat to preserve private code, but this is the essence of the situation. Using a combo of reactivity and making calls at the right time, I could refactor to allow MSW to finish loading, which then allows the mocked config request to be handled by MSW.\n\n**The takeaway**: don't make requests before they're ready to be handled in MSW.\n\n## Acknowledgement\n\nI know this is a dev-setup issue and isn't likely to be relevant in production or even dev-server testing (i.e. non-localhost). The API from which I fetch the config will already be up and running, so this is a moot issue regarding that.\n\nHowever, I use MSW a **lot**, and it's great to remember with clarity why I've run into this issue in the past. Hopefully by writing this post, I'll remind myself and/or cement the knowledge in memory better.\n\nHope this helps, dear anonymous reader!","src/content/blog/msw-reminder.md","22369270ed764e2e",{"html":494,"metadata":495},"\u003Ch1 id=\"mock-service-worker-reminder\">Mock Service Worker Reminder\u003C/h1>\n\u003Cp>I’ve been using Mock Service Worker (MSW) for a couple of years now, and it’s really been a game-changer. I love not worrying about mocking implementations of services and mocking the API response instead. It’s brilliant.\u003C/p>\n\u003Ch2 id=\"the-issue\">The Issue\u003C/h2>\n\u003Cp>I frequently find myself having a similar problem though, which is entirely on my end. I keep getting requests returning my markup instead of the desired JSON data. That obviously causes bad requests or handling of data. For example…\u003C/p>\n\u003Cfigure>\n    \u003Cimg src=\"/images/blog/msw-reminder--example-JSON-parse.jpg\" alt=\"Example JSON Parse Result\">\n    \u003Cimg src=\"./images/msw-reminder--example-JSON-parse.jpg\" alt=\"Example JSON Parse Result\">\n    \u003Cfigcaption>Example JSON Parse Result\u003Cfigcaption>\n\u003C/figcaption>\u003C/figcaption>\u003C/figure>\n\u003Ch2 id=\"the-solution\">The Solution\u003C/h2>\n\u003Cp>The source of my problem relatively simple: \u003Cstrong>I’m making requests too soon.\u003C/strong>\u003C/p>\n\u003Cp>My current setup is to call \u003Ccode>worker.start()\u003C/code> inside of a helper function that only optionally loads the MSW resources. This helps keep my production bundle size smaller. There is also a way to wait for the service worker to finish loading so that my particular problem doesn’t happen.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/mswjs/msw/issues/73\">Kent C. Dodds had this issue addressed in Issue 73\u003C/a>, which reminded me of how to wait for the workers to be ready. Specifically, \u003Ca href=\"https://github.com/kettanaito\">@kettanaito\u003C/a>’s \u003Ca href=\"https://github.com/mswjs/msw/issues/73#issuecomment-601584127\">answer\u003C/a> shows that the \u003Ccode>start()\u003C/code> method is async and needs to be \u003Ccode>await\u003C/code>ed in order for requests to follow correctly. Of course!\u003C/p>\n\u003Cp>I then found my most recent troublemaker in this instance of the problem. I was overly ambitious in making one of my modules (which makes the problem request) fetching data too early. It looks something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { computed } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'vue'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { getConfig } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './getConfig'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 👇 the line that's calling too early\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> config\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> getConfig\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Promise&#x3C;Config> where Config is a reactive Vue object\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> origin\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> computed\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> config?.someOrigin \u003C/span>\u003Cspan style=\"color:#F97583\">??\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> link\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> computed\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">origin\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">value\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">endpoint\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> useLink\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // … some caching logic for the config to only need to fetch it once…\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> link;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The solution ended up being simple this time. I just needed to move the initial fetch of the config to the \u003Ccode>useLink()\u003C/code> composable so that it would be called after MSW’s load finishes.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { computed } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'vue'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { getConfig } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './getConfig'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 👇 the line that's calling too early\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">config\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">execute\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> getConfig\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D\">// refactored as a composable to return the reactive config, which will be updated once execute() finishes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> origin\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> computed\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> config?.someOrigin \u003C/span>\u003Cspan style=\"color:#F97583\">??\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> link\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> computed\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">origin\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">value\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">endpoint\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> useLink\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // … some caching logic for the config to only need to fetch it once…\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    execute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D\">// just letting this resolve behind the scenes; the \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> link;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Admittedly, I chopped up my original code somewhat to preserve private code, but this is the essence of the situation. Using a combo of reactivity and making calls at the right time, I could refactor to allow MSW to finish loading, which then allows the mocked config request to be handled by MSW.\u003C/p>\n\u003Cp>\u003Cstrong>The takeaway\u003C/strong>: don’t make requests before they’re ready to be handled in MSW.\u003C/p>\n\u003Ch2 id=\"acknowledgement\">Acknowledgement\u003C/h2>\n\u003Cp>I know this is a dev-setup issue and isn’t likely to be relevant in production or even dev-server testing (i.e. non-localhost). The API from which I fetch the config will already be up and running, so this is a moot issue regarding that.\u003C/p>\n\u003Cp>However, I use MSW a \u003Cstrong>lot\u003C/strong>, and it’s great to remember with clarity why I’ve run into this issue in the past. Hopefully by writing this post, I’ll remind myself and/or cement the knowledge in memory better.\u003C/p>\n\u003Cp>Hope this helps, dear anonymous reader!\u003C/p>",{"headings":496,"localImagePaths":506,"remoteImagePaths":507,"frontmatter":481,"imagePaths":508},[497,499,502,503],{"depth":24,"slug":498,"text":482},"mock-service-worker-reminder",{"depth":27,"slug":500,"text":501},"the-issue","The Issue",{"depth":27,"slug":253,"text":254},{"depth":27,"slug":504,"text":505},"acknowledgement","Acknowledgement",[],[],[],"msw-reminder.md","testing-components-async",{"id":510,"data":512,"body":519,"filePath":520,"digest":521,"rendered":522,"legacyId":537},{"external":12,"draft":12,"title":513,"description":514,"date":515,"tags":516},"Testing Components with Async Behaviors","I explain my use of events in testing views/components.",["Date","2025-03-24T00:00:00.000Z"],[337,338,517,518],"vue","js","# Testing Components with Async Behaviors\n\nIn my normal dev setup, I'm using [Vue.js](https://vuejs.org/), [Vite](https://vite.dev/), [Vitest](https://vitest.dev/), [MSW.js](https://mswjs.io/) (I wrote about [some MSW lessons](/blog/msw-lessons/) recently too), and [@vue/test-utils](https://test-utils.vuejs.org/).\n\nVue Test Utils (VTU) is particularly helpful when dealing with interacting with components and the DOM, e.g. clicking buttons or triggering key events.\n\n```ts\nawait wrapper.find('button').trigger('click');\n```\n\nInternally, [VTU uses Vue's `nextTick()`](https://github.com/vuejs/test-utils/blob/6332d7c434fd9d4e10a61a821ae27c7778bc397f/src/baseWrapper.ts#L366) to dispatch the event and wait for the [next tick](https://vuejs.org/api/general#nexttick). This works in most cases, which is excellent. It's short and easy to read. Win.\n\n## Async Behavior\n\nHowever, not all async behaviors are so easily handled. In many of my components, especially view components with dynamic data tables fetching data from APIs, I must wait for data to return from the server in order to assert my expectations.\n\nThis might be as simple as fetching the data and ensuring I have the column count expected, displayed data is formatted correctly (e.g. phone numbers, money amounts, etc.), or that individual row actions are displaying as they should. It may be as complicated as interacting with the table and ensuring toast messages, error alerts, or other user feedback is displayed. That often requires multiple requests.\n\n## My Solution\n\nMy solution has been to handle the changes I want to test for, then emit custom events from the component that are used (sometimes exclusively) by the testing code. Pretend we have a page like `RecordLookup` that performs basic CRUD operations on records.\n\nLet's say the events will be `load`, `record-create`, `record-update`, `update-error`, & `record-delete`. \n\n**Note:** I'm not using past-tense in order to mimic native DOM events like `click` instead of `clicked`.\n\nUsing MSW, I am able to make async requests that take longer than the 10-ish ms  that `nextTick()` typically takes. This means we cannot rely on only the `await` keyword. In addition to that, we don't have a reference to the promise that will be awaited when the data returns. \n\nThis means **setting callbacks on custom events**. This can be done through VTU's prop bindings.\n\nThis also means **I cannot rely on the regular callback signature** for Vitest's `test` function (I prefer the `it` alias). This is where the [Done Callback](https://vitest.dev/guide/migration.html#done-callback) comes into play.\n\nFurthermore, I must be sure to handle exceptions in the test code, which is usually how the failed tests are communicated.\n\n```ts\ndescribe('Record Lookup', () => {\n    it('should load records automatically', () => new Promise((done, fail) => {\n        const wrapper = mount(RecordLookup, {\n            props: {\n                // I prefer to keep the wrapper portion as small as possible\n                // for easier reading/skimming. When it gets too big, I have\n                // trouble keeping track of block endings.\n                // Moving the expectation code to another function also lets\n                // me handle the promise more simply.\n                onLoaded: checkForData().then(done).catch(fail),\n            },\n        });\n        async function checkForData() {\n            // some assertion code to check that rows exist, no error/empty msg \n            // is displaying, etc.\n        }\n    }));\n});\n```\n\nThe other events discussed can be handled similarly, and each custom event listener must handle errors. Only the final callback needs the `done` (or `resolve` if you follow ESLint) callback called.\n\n```ts\nit('should delete a record', () => new Promise((done, fail) => {\n    const wrapper = mount(RecordLookup, {\n        props: {\n            // Remember: the data is auto-fetched when mounted & \"loaded\" emits.\n            onLoaded: deleteRecord().catch(fail),\n            // Notice the quoted key; the custom event is converted into\n            // \"on{Snake-case-name}\" with multiple word event names.\n            'onRecord-delete': confirmDeletion.then(done).catch(fail),\n        },\n    });\n    async function deleteRecord() {\n        // …\n    }\n    async function confirmDeletion() {\n        // expect deleted record is no longer in the table\n    }\n}));\n```\n\nHandling custom events this way allows me to test async behaviors extensively from Vitest alone (for better or worse). Using custom events and handlers can help keep components from being tested by their implementation and instead rely on input/output pairings that remain decoupled from implementation details.\n\nHit me up on the socials if you have feedback, criticisms, or improvements that can be made to this process. I've not covered all the nuances that I have on a given test case, but this illustrates the idea well enough. Also let me know if you're interested in more scenarios/examples you'd like to see.\n\nHappy testing, devs!","src/content/blog/testing-components-async.md","7943f432d1e4cf6b",{"html":523,"metadata":524},"\u003Ch1 id=\"testing-components-with-async-behaviors\">Testing Components with Async Behaviors\u003C/h1>\n\u003Cp>In my normal dev setup, I’m using \u003Ca href=\"https://vuejs.org/\">Vue.js\u003C/a>, \u003Ca href=\"https://vite.dev/\">Vite\u003C/a>, \u003Ca href=\"https://vitest.dev/\">Vitest\u003C/a>, \u003Ca href=\"https://mswjs.io/\">MSW.js\u003C/a> (I wrote about \u003Ca href=\"/blog/msw-lessons/\">some MSW lessons\u003C/a> recently too), and \u003Ca href=\"https://test-utils.vuejs.org/\">@vue/test-utils\u003C/a>.\u003C/p>\n\u003Cp>Vue Test Utils (VTU) is particularly helpful when dealing with interacting with components and the DOM, e.g. clicking buttons or triggering key events.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> wrapper.\u003C/span>\u003Cspan style=\"color:#B392F0\">find\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'button'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">trigger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'click'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Internally, \u003Ca href=\"https://github.com/vuejs/test-utils/blob/6332d7c434fd9d4e10a61a821ae27c7778bc397f/src/baseWrapper.ts#L366\">VTU uses Vue’s \u003Ccode>nextTick()\u003C/code>\u003C/a> to dispatch the event and wait for the \u003Ca href=\"https://vuejs.org/api/general#nexttick\">next tick\u003C/a>. This works in most cases, which is excellent. It’s short and easy to read. Win.\u003C/p>\n\u003Ch2 id=\"async-behavior\">Async Behavior\u003C/h2>\n\u003Cp>However, not all async behaviors are so easily handled. In many of my components, especially view components with dynamic data tables fetching data from APIs, I must wait for data to return from the server in order to assert my expectations.\u003C/p>\n\u003Cp>This might be as simple as fetching the data and ensuring I have the column count expected, displayed data is formatted correctly (e.g. phone numbers, money amounts, etc.), or that individual row actions are displaying as they should. It may be as complicated as interacting with the table and ensuring toast messages, error alerts, or other user feedback is displayed. That often requires multiple requests.\u003C/p>\n\u003Ch2 id=\"my-solution\">My Solution\u003C/h2>\n\u003Cp>My solution has been to handle the changes I want to test for, then emit custom events from the component that are used (sometimes exclusively) by the testing code. Pretend we have a page like \u003Ccode>RecordLookup\u003C/code> that performs basic CRUD operations on records.\u003C/p>\n\u003Cp>Let’s say the events will be \u003Ccode>load\u003C/code>, \u003Ccode>record-create\u003C/code>, \u003Ccode>record-update\u003C/code>, \u003Ccode>update-error\u003C/code>, &#x26; \u003Ccode>record-delete\u003C/code>.\u003C/p>\n\u003Cp>\u003Cstrong>Note:\u003C/strong> I’m not using past-tense in order to mimic native DOM events like \u003Ccode>click\u003C/code> instead of \u003Ccode>clicked\u003C/code>.\u003C/p>\n\u003Cp>Using MSW, I am able to make async requests that take longer than the 10-ish ms  that \u003Ccode>nextTick()\u003C/code> typically takes. This means we cannot rely on only the \u003Ccode>await\u003C/code> keyword. In addition to that, we don’t have a reference to the promise that will be awaited when the data returns.\u003C/p>\n\u003Cp>This means \u003Cstrong>setting callbacks on custom events\u003C/strong>. This can be done through VTU’s prop bindings.\u003C/p>\n\u003Cp>This also means \u003Cstrong>I cannot rely on the regular callback signature\u003C/strong> for Vitest’s \u003Ccode>test\u003C/code> function (I prefer the \u003Ccode>it\u003C/code> alias). This is where the \u003Ca href=\"https://vitest.dev/guide/migration.html#done-callback\">Done Callback\u003C/a> comes into play.\u003C/p>\n\u003Cp>Furthermore, I must be sure to handle exceptions in the test code, which is usually how the failed tests are communicated.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Record Lookup'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'should load records automatically'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">fail\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> wrapper\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> mount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(RecordLookup, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            props: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">                // I prefer to keep the wrapper portion as small as possible\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">                // for easier reading/skimming. When it gets too big, I have\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">                // trouble keeping track of block endings.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">                // Moving the expectation code to another function also lets\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">                // me handle the promise more simply.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                onLoaded: \u003C/span>\u003Cspan style=\"color:#B392F0\">checkForData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(done).\u003C/span>\u003Cspan style=\"color:#B392F0\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(fail),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> checkForData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">            // some assertion code to check that rows exist, no error/empty msg \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">            // is displaying, etc.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The other events discussed can be handled similarly, and each custom event listener must handle errors. Only the final callback needs the \u003Ccode>done\u003C/code> (or \u003Ccode>resolve\u003C/code> if you follow ESLint) callback called.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'should delete a record'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">fail\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> wrapper\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> mount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(RecordLookup, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        props: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">            // Remember: the data is auto-fetched when mounted &#x26; \"loaded\" emits.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            onLoaded: \u003C/span>\u003Cspan style=\"color:#B392F0\">deleteRecord\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(fail),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">            // Notice the quoted key; the custom event is converted into\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">            // \"on{Snake-case-name}\" with multiple word event names.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            'onRecord-delete'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: confirmDeletion.\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(done).\u003C/span>\u003Cspan style=\"color:#B392F0\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(fail),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> deleteRecord\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // …\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> confirmDeletion\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // expect deleted record is no longer in the table\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Handling custom events this way allows me to test async behaviors extensively from Vitest alone (for better or worse). Using custom events and handlers can help keep components from being tested by their implementation and instead rely on input/output pairings that remain decoupled from implementation details.\u003C/p>\n\u003Cp>Hit me up on the socials if you have feedback, criticisms, or improvements that can be made to this process. I’ve not covered all the nuances that I have on a given test case, but this illustrates the idea well enough. Also let me know if you’re interested in more scenarios/examples you’d like to see.\u003C/p>\n\u003Cp>Happy testing, devs!\u003C/p>",{"headings":525,"localImagePaths":534,"remoteImagePaths":535,"frontmatter":512,"imagePaths":536},[526,528,531],{"depth":24,"slug":527,"text":513},"testing-components-with-async-behaviors",{"depth":27,"slug":529,"text":530},"async-behavior","Async Behavior",{"depth":27,"slug":532,"text":533},"my-solution","My Solution",[],[],[],"testing-components-async.md","msw-lessons",{"id":538,"data":540,"body":547,"filePath":548,"digest":549,"rendered":550,"legacyId":585},{"external":12,"draft":12,"title":541,"description":542,"date":543,"tags":544,"todo":546},"MSW Lessons","I share lessons I have learned from using MSW to mock API requests.",["Date","2025-03-20T00:00:00.000Z"],[337,338,545,518],"api","remember to link to MSW Reminder article when images are fixed","# MSW Lessons\n\nA little over a year ago, I read an article ([I think by Kent Dodds](https://kentcdodds.com/blog/stop-mocking-fetch)) about [MSW (Mock Service Worker)](https://mswjs.io/) that recommended mocking API calls instead of mocking service functions/classes to grab data.\n\nI initially found this suggestion dubious. I thought, \"Oh great, one more dependency to manage and learn.\" After reading through the article and skimming the docs site, I was curious enough to try it. I had a series of green field projects ramping up where I could refine my use of it. I didn't know how much I'd fall in love with it.\n\n## Why Mock APIs?\n\nThe projects where I used MSW were front-end SPAs with a C# API back-end. While I know enough C# to make changes or build front-of-the-back-end libraries, I don't build full APIs in C# regularly enough to do it fast. This was a time where being fast was very valuable. (I'm also not a keen fan of .NET's way of handling things. It's not terrible. It's just not my preferred flavor.)\n\nSo I got to mocking the API instead and found a number of benefits.\n\n### Early API Design\n\nMy current pattern is to review the Figma designs and step through the flow of the screens. I comment in the designs or take notes in my markdown notes as I go. **The key is to identify where I expect requests will need to be made.**\n\nAs I make note of which requests I expect are needed, I also make an initial design of the request body \"shape.\" This allows me to (1) collaborate with the back-end developer(s) and (2) build an initial API mock so I can get started right away. No need to wait on the actual API.\n\n### Rapid Early Iteration\n\nGiven the API endpoint and payloads are at least initially designed, I can now start writing the actual service functions that will make the request for data. Once I switch to using the actual API, if the design doesn't change, these functions need not change.\n\nThis is also where one of my other favorite tools comes into play: [faker.js](https://fakerjs.dev/api/). I need to return some kind of data, often complex, when I make these mock requests. I also need more than a couple of rows. We often have paginated data tables, so I need 20-50 records of relatively unique data.\n\nI write a script to generate the dummy data based on the expected response data, then in the MSW endpoint handler script, I import that JSON, cache it (so data is updated between requests), and return it to the UI.\n\n```js\nimport fs from 'fs';\nimport path from 'path';\nimport { faker } from '@faker-js/faker';\n\n// example generator script\nfunction generateTransaction() {\n    // mock the data as needed using faker\n    // …\n    return {…};\n}\n\n// … other implementation code; when simple enough, I can have AI do a lot of\n\n/**\n * @param {Array} dataToWrite Array of data to write to file\n */\nfunction writeToFile(dataToWrite) {\n    const fileName = path.resolve('src/mocks/TransactionDetails.all.json');\n    fs.writeFile(fileName, JSON.stringify(dataToWrite, null, 2), (err) => {\n        if (err)\n            throw err;\n        console.log('File written successfully!');\n    });\n}\n\nwriteToFile(callNTimes(generateTransaction, 55));\n```\n\n### Unit Test Compatibility\n\nThese mocked endpoints also make unit testing fairly straight forward. I can still simulate the behavior to test it. I often emit events from components once data has loaded, is being fetched, and when POST/PUT/PATCH requests succeed or fail. That way, in the test, I can listen for those events and make assertions.\n\n### Web Socket Testing\n\nVery recently, [MSW began supporting Web Sockets](https://mswjs.io/docs/basics/handling-websocket-events/). This was excellent timing, as one of our products began using web sockets to live update its data tables based on when records were coming in, going out, or being updated.\n\nSome extra testing setup was necessary to manually trigger web socket events, but it all works great. (I grab the socket connection, send my own event to the \"server,\" and that triggers an update event to be handled by the UI.)\n\n## Challenges\n\n### Maintenance\n\n**Maintaining the mocked API is the greatest challenge, just as it would be with mocking services.** Once changes happen in the real API, disciplined devs must remember to update the mocks and tests. When these stagnate and become out of sync, it causes issues in automated tests and localhost development.\n\nIt's fairly common that the API contract will update during development, so I must keep my mocks up-to-date as well. This is to be expected now.\n\n### Conditional Loading\n\nUpon monitoring the bundled assets, I discovered that MSW was being included in my production bundles. This was unacceptable.\n\nTo avoid this, I wrote a helper function that can be called from the `main.ts` script (e.g. `maybeLoadMocks()`). Within that helper, I check environment variables for whether or not the APIs should be mocked (e.g. assuming Vite, `VITE_MOCK_API=true`). If true, I use a dynamic import to fetch the MSW init code.\n\n```ts\n// maybeLoadMocks.ts\n\n// imported from constants so vitest can stub them\nimport { isDev, shouldMockAPI } from '@/constants';\n\nexport const shouldLoadMocks = isDev && shouldMockAPI;\n\nexport async function maybeLoadMocks() {\n    if (!shouldLoadMocks)\n        return;\n\n    const { useMocks } = await import('../mocks/useMocks');\n    useMocks();\n}\n\n// useMocks.ts\nimport { worker } from '@/mocks/browser';\n\nexport function useMocks() {\n    worker.start({\n        onUnhandledRequest(request, print) {\n            const url = new URL(request.url);\n            // By convention, our APIs start with \"/api/v{number}\"\n            if (/^\\/api\\/v\\d+/.test(url.pathname) === false)\n                return;\n\n            print.warning();\n        },\n    });\n}\n```\n\n## Main Takeaways\n\n- Early API planning reveals blind spots and faulty assumptions when there's time to fix them.\n- Early API planning also forces a closer look at mockups/designs to solve problems early.\n- Early working API designs enables rapid iteration and development, including early unit testing.\n- Maintenance requires intentionality.\n- Bundles should be checked regularly.\n\nThese have been really great lessons, and my experience with MSW has been awesome. I highly recommend trying [MSW (Mock Service Worker)](https://mswjs.io/) in your next project, especially if you're on a team and are not responsible for writing the API. \n\nIt may even be helpful for full stack devs depending on which side you start building first. I've noticed building more complex request handlers has allowed me to make changes or catch things the API would encounter in low-impact settings. No expensive cloud functions or database involvement required.\n\nHappy building, friends 🙂","src/content/blog/msw-lessons.md","30835d3ee1277ec8",{"html":551,"metadata":552},"\u003Ch1 id=\"msw-lessons\">MSW Lessons\u003C/h1>\n\u003Cp>A little over a year ago, I read an article (\u003Ca href=\"https://kentcdodds.com/blog/stop-mocking-fetch\">I think by Kent Dodds\u003C/a>) about \u003Ca href=\"https://mswjs.io/\">MSW (Mock Service Worker)\u003C/a> that recommended mocking API calls instead of mocking service functions/classes to grab data.\u003C/p>\n\u003Cp>I initially found this suggestion dubious. I thought, “Oh great, one more dependency to manage and learn.” After reading through the article and skimming the docs site, I was curious enough to try it. I had a series of green field projects ramping up where I could refine my use of it. I didn’t know how much I’d fall in love with it.\u003C/p>\n\u003Ch2 id=\"why-mock-apis\">Why Mock APIs?\u003C/h2>\n\u003Cp>The projects where I used MSW were front-end SPAs with a C# API back-end. While I know enough C# to make changes or build front-of-the-back-end libraries, I don’t build full APIs in C# regularly enough to do it fast. This was a time where being fast was very valuable. (I’m also not a keen fan of .NET’s way of handling things. It’s not terrible. It’s just not my preferred flavor.)\u003C/p>\n\u003Cp>So I got to mocking the API instead and found a number of benefits.\u003C/p>\n\u003Ch3 id=\"early-api-design\">Early API Design\u003C/h3>\n\u003Cp>My current pattern is to review the Figma designs and step through the flow of the screens. I comment in the designs or take notes in my markdown notes as I go. \u003Cstrong>The key is to identify where I expect requests will need to be made.\u003C/strong>\u003C/p>\n\u003Cp>As I make note of which requests I expect are needed, I also make an initial design of the request body “shape.” This allows me to (1) collaborate with the back-end developer(s) and (2) build an initial API mock so I can get started right away. No need to wait on the actual API.\u003C/p>\n\u003Ch3 id=\"rapid-early-iteration\">Rapid Early Iteration\u003C/h3>\n\u003Cp>Given the API endpoint and payloads are at least initially designed, I can now start writing the actual service functions that will make the request for data. Once I switch to using the actual API, if the design doesn’t change, these functions need not change.\u003C/p>\n\u003Cp>This is also where one of my other favorite tools comes into play: \u003Ca href=\"https://fakerjs.dev/api/\">faker.js\u003C/a>. I need to return some kind of data, often complex, when I make these mock requests. I also need more than a couple of rows. We often have paginated data tables, so I need 20-50 records of relatively unique data.\u003C/p>\n\u003Cp>I write a script to generate the dummy data based on the expected response data, then in the MSW endpoint handler script, I import that JSON, cache it (so data is updated between requests), and return it to the UI.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fs \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'fs'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> path \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'path'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { faker } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@faker-js/faker'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// example generator script\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> generateTransaction\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // mock the data as needed using faker\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // …\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {…};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// … other implementation code; when simple enough, I can have AI do a lot of\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#B392F0\"> {Array}\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dataToWrite\u003C/span>\u003Cspan style=\"color:#6A737D\"> Array of data to write to file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> writeToFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">dataToWrite\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> fileName\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> path.\u003C/span>\u003Cspan style=\"color:#B392F0\">resolve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'src/mocks/TransactionDetails.all.json'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    fs.\u003C/span>\u003Cspan style=\"color:#B392F0\">writeFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(fileName, \u003C/span>\u003Cspan style=\"color:#79B8FF\">JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">stringify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(dataToWrite, \u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">), (\u003C/span>\u003Cspan style=\"color:#FFAB70\">err\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (err)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            throw\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> err;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'File written successfully!'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">writeToFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">callNTimes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(generateTransaction, \u003C/span>\u003Cspan style=\"color:#79B8FF\">55\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"unit-test-compatibility\">Unit Test Compatibility\u003C/h3>\n\u003Cp>These mocked endpoints also make unit testing fairly straight forward. I can still simulate the behavior to test it. I often emit events from components once data has loaded, is being fetched, and when POST/PUT/PATCH requests succeed or fail. That way, in the test, I can listen for those events and make assertions.\u003C/p>\n\u003Ch3 id=\"web-socket-testing\">Web Socket Testing\u003C/h3>\n\u003Cp>Very recently, \u003Ca href=\"https://mswjs.io/docs/basics/handling-websocket-events/\">MSW began supporting Web Sockets\u003C/a>. This was excellent timing, as one of our products began using web sockets to live update its data tables based on when records were coming in, going out, or being updated.\u003C/p>\n\u003Cp>Some extra testing setup was necessary to manually trigger web socket events, but it all works great. (I grab the socket connection, send my own event to the “server,” and that triggers an update event to be handled by the UI.)\u003C/p>\n\u003Ch2 id=\"challenges\">Challenges\u003C/h2>\n\u003Ch3 id=\"maintenance\">Maintenance\u003C/h3>\n\u003Cp>\u003Cstrong>Maintaining the mocked API is the greatest challenge, just as it would be with mocking services.\u003C/strong> Once changes happen in the real API, disciplined devs must remember to update the mocks and tests. When these stagnate and become out of sync, it causes issues in automated tests and localhost development.\u003C/p>\n\u003Cp>It’s fairly common that the API contract will update during development, so I must keep my mocks up-to-date as well. This is to be expected now.\u003C/p>\n\u003Ch3 id=\"conditional-loading\">Conditional Loading\u003C/h3>\n\u003Cp>Upon monitoring the bundled assets, I discovered that MSW was being included in my production bundles. This was unacceptable.\u003C/p>\n\u003Cp>To avoid this, I wrote a helper function that can be called from the \u003Ccode>main.ts\u003C/code> script (e.g. \u003Ccode>maybeLoadMocks()\u003C/code>). Within that helper, I check environment variables for whether or not the APIs should be mocked (e.g. assuming Vite, \u003Ccode>VITE_MOCK_API=true\u003C/code>). If true, I use a dynamic import to fetch the MSW init code.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// maybeLoadMocks.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// imported from constants so vitest can stub them\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { isDev, shouldMockAPI } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/constants'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> shouldLoadMocks\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> isDev \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> shouldMockAPI;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> maybeLoadMocks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">shouldLoadMocks)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">useMocks\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#F97583\"> import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'../mocks/useMocks'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    useMocks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// useMocks.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { worker } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/mocks/browser'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> useMocks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    worker.\u003C/span>\u003Cspan style=\"color:#B392F0\">start\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        onUnhandledRequest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">request\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> url\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(request.url);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">            // By convention, our APIs start with \"/api/v{number}\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#F97583\">^\u003C/span>\u003Cspan style=\"color:#85E89D;font-weight:bold\">\\/\u003C/span>\u003Cspan style=\"color:#DBEDFF\">api\u003C/span>\u003Cspan style=\"color:#85E89D;font-weight:bold\">\\/\u003C/span>\u003Cspan style=\"color:#DBEDFF\">v\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\d\u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">test\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url.pathname) \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            print.\u003C/span>\u003Cspan style=\"color:#B392F0\">warning\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"main-takeaways\">Main Takeaways\u003C/h2>\n\u003Cul>\n\u003Cli>Early API planning reveals blind spots and faulty assumptions when there’s time to fix them.\u003C/li>\n\u003Cli>Early API planning also forces a closer look at mockups/designs to solve problems early.\u003C/li>\n\u003Cli>Early working API designs enables rapid iteration and development, including early unit testing.\u003C/li>\n\u003Cli>Maintenance requires intentionality.\u003C/li>\n\u003Cli>Bundles should be checked regularly.\u003C/li>\n\u003C/ul>\n\u003Cp>These have been really great lessons, and my experience with MSW has been awesome. I highly recommend trying \u003Ca href=\"https://mswjs.io/\">MSW (Mock Service Worker)\u003C/a> in your next project, especially if you’re on a team and are not responsible for writing the API.\u003C/p>\n\u003Cp>It may even be helpful for full stack devs depending on which side you start building first. I’ve noticed building more complex request handlers has allowed me to make changes or catch things the API would encounter in low-impact settings. No expensive cloud functions or database involvement required.\u003C/p>\n\u003Cp>Happy building, friends 🙂\u003C/p>",{"headings":553,"localImagePaths":582,"remoteImagePaths":583,"frontmatter":540,"imagePaths":584},[554,555,558,561,564,567,570,573,576,579],{"depth":24,"slug":538,"text":541},{"depth":27,"slug":556,"text":557},"why-mock-apis","Why Mock APIs?",{"depth":37,"slug":559,"text":560},"early-api-design","Early API Design",{"depth":37,"slug":562,"text":563},"rapid-early-iteration","Rapid Early Iteration",{"depth":37,"slug":565,"text":566},"unit-test-compatibility","Unit Test Compatibility",{"depth":37,"slug":568,"text":569},"web-socket-testing","Web Socket Testing",{"depth":27,"slug":571,"text":572},"challenges","Challenges",{"depth":37,"slug":574,"text":575},"maintenance","Maintenance",{"depth":37,"slug":577,"text":578},"conditional-loading","Conditional Loading",{"depth":27,"slug":580,"text":581},"main-takeaways","Main Takeaways",[],[],[],"msw-lessons.md","particle-network-addition",{"id":586,"data":588,"body":595,"filePath":596,"digest":597,"rendered":598,"legacyId":620},{"external":12,"draft":12,"title":589,"description":590,"date":591,"tags":592},"Particle Network Addition","Come learn from my experience taking an old particle network library and modernizing it for my own use.",["Date","2025-04-14T00:00:00.000Z"],[337,338,518,593,594],"canvas","accessibility","\u003C!-- https://web.archive.org/web/20150727021631/https://blog.alexwendland.com/2015/particle-network-js-animations/ -->\n\n# Particle Network Addition\n\nI've recently added a \"particle network\" animation to my background. I've always wanted to understand how these cool features work. I've never really known the term(s) for them until recently. Here's how I started using it on this site.\n\n## Learning the Term\n\nI began by searching Google for things like \"floating nodes js,\" \"floating dots js,\" and similar searches, but anything with \"nodes\" gave me Node.js results (no surprise) and others were not helpful either. I then tried Grok and described the behavior the best I could. This produced helpful results. The following was my prompt…\n\n> Context: HTML canvas element & JS\n> \n> What's it called when a canvas element has animated nodes (pin points like stars) floating around that draw lines to each other when they're close enough?\n\n… and part of Grok's reply witht he helpful bits…\n\n> What you're describing is commonly referred to as a \"particle network\" or \"connected particles animation\" in the context of an HTML canvas element and JavaScript.…\n\nNow I had my terms. With a few confirmation searches using \"particle network\" to ensure it wasn't hallucinating, I began researching some GitHub & blogged options.\n\n## Experimenting\n\nI searched through the options available, and there are some tutorials for creating this myself, which I will certainly be doing in the future for my own learning/leveling-up. For now, I just want a quick addition to get started and will refine from there. I landed on the [decade-old `canvas-particle-network`](https://github.com/JulianLaval/canvas-particle-network). It's easy to get running quickly, which is what I was after. It won't give me everything I want, so I can either fork the repo or start from scratch elsewhere, but again, this is just to get up and running.\n\nI dropped a copy of the script in my `/public` folder (the npm package didn't have TypeScript definitions working quite right when I tried installing from there, so I left the copy+paste version in place). One trick to playing with canvas is never knowing when it's rendering the canvas or not, so I (1) set the `body` background to red (`#a00`) and the canvas background passed to the library to a darker red (`#300`). This told me which was rendering.\n\nOnce it started rendering the particle network nodes and edges, I unset the reds and played with the colors & nodes of the particles.\n\n## Giving It A Home\n\nNow that I had the settings I liked, I took the time to make a separate component for the particle network to handle logic like init, a11y settings (see below), and when to load the script.\n\n### Accessibility (a11y)\n\nSeeing it all, I noticed it's *a lot* of movement. I know about (but don't often use) the `prefers-reduced-motion` feature. This was a great chance to play more with it.\n\n`window.matchMedia('(prefers-reduced-motion: reduce)')` returns an object and `.matches` provides a boolean for the setting.\n\n```js\nconst reducedMotionMediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\nif (!reducedMotionMediaQuery.matches) {\n    startAnimation();\n}\n```\n\nCouple this with the handy `change` event listener, and I can toggle the start/stop of the animation.\n\n```js\nconst reducedMotionMediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\nif (!reducedMotionMediaQuery.matches) {\n    startAnimation();\n}\nreducedMotionMediaQuery.addEventListener('change', (event) => {\n    if (event.matches) {\n        stopAnimation();\n    } else {\n        startAnimation();\n    }\n});\n```\n\nIn future iterations (i.e. when I build my own), I'd like to set a fade transition for when it starts/stops the animation. Perhaps a callback for when the transition completes as well. Also, a method to start and stop the animation would be a great improvement.\n\nI also added a mostly opaque background color to the content space to avoid floating particles/edges from distracting from reading. I used *some* transparency though, because frankly, I'm a sucker for see-through effects. An additional `box-shadow` with a generous spread helps it fade a bit. This content background only shows when the effect is active though.\n\n## Wrap Up\n\nSo that wraps my report for the new particle network feature running in the background! As mentioned already, there are a few features I'll be adding to improve the site/feature:\n\n- reduced motion toggle\n- custom implementation (start/stop methods + transition callback)\n- theme-sensitivity (after I add a theme toggle…)","src/content/blog/particle-network-addition.md","f777790478e75e45",{"html":599,"metadata":600},"\u003C!-- https://web.archive.org/web/20150727021631/https://blog.alexwendland.com/2015/particle-network-js-animations/ -->\n\u003Ch1 id=\"particle-network-addition\">Particle Network Addition\u003C/h1>\n\u003Cp>I’ve recently added a “particle network” animation to my background. I’ve always wanted to understand how these cool features work. I’ve never really known the term(s) for them until recently. Here’s how I started using it on this site.\u003C/p>\n\u003Ch2 id=\"learning-the-term\">Learning the Term\u003C/h2>\n\u003Cp>I began by searching Google for things like “floating nodes js,” “floating dots js,” and similar searches, but anything with “nodes” gave me Node.js results (no surprise) and others were not helpful either. I then tried Grok and described the behavior the best I could. This produced helpful results. The following was my prompt…\u003C/p>\n\u003Cblockquote>\n\u003Cp>Context: HTML canvas element &#x26; JS\u003C/p>\n\u003Cp>What’s it called when a canvas element has animated nodes (pin points like stars) floating around that draw lines to each other when they’re close enough?\u003C/p>\n\u003C/blockquote>\n\u003Cp>… and part of Grok’s reply witht he helpful bits…\u003C/p>\n\u003Cblockquote>\n\u003Cp>What you’re describing is commonly referred to as a “particle network” or “connected particles animation” in the context of an HTML canvas element and JavaScript.…\u003C/p>\n\u003C/blockquote>\n\u003Cp>Now I had my terms. With a few confirmation searches using “particle network” to ensure it wasn’t hallucinating, I began researching some GitHub &#x26; blogged options.\u003C/p>\n\u003Ch2 id=\"experimenting\">Experimenting\u003C/h2>\n\u003Cp>I searched through the options available, and there are some tutorials for creating this myself, which I will certainly be doing in the future for my own learning/leveling-up. For now, I just want a quick addition to get started and will refine from there. I landed on the \u003Ca href=\"https://github.com/JulianLaval/canvas-particle-network\">decade-old \u003Ccode>canvas-particle-network\u003C/code>\u003C/a>. It’s easy to get running quickly, which is what I was after. It won’t give me everything I want, so I can either fork the repo or start from scratch elsewhere, but again, this is just to get up and running.\u003C/p>\n\u003Cp>I dropped a copy of the script in my \u003Ccode>/public\u003C/code> folder (the npm package didn’t have TypeScript definitions working quite right when I tried installing from there, so I left the copy+paste version in place). One trick to playing with canvas is never knowing when it’s rendering the canvas or not, so I (1) set the \u003Ccode>body\u003C/code> background to red (\u003Ccode>#a00\u003C/code>) and the canvas background passed to the library to a darker red (\u003Ccode>#300\u003C/code>). This told me which was rendering.\u003C/p>\n\u003Cp>Once it started rendering the particle network nodes and edges, I unset the reds and played with the colors &#x26; nodes of the particles.\u003C/p>\n\u003Ch2 id=\"giving-it-a-home\">Giving It A Home\u003C/h2>\n\u003Cp>Now that I had the settings I liked, I took the time to make a separate component for the particle network to handle logic like init, a11y settings (see below), and when to load the script.\u003C/p>\n\u003Ch3 id=\"accessibility-a11y\">Accessibility (a11y)\u003C/h3>\n\u003Cp>Seeing it all, I noticed it’s \u003Cem>a lot\u003C/em> of movement. I know about (but don’t often use) the \u003Ccode>prefers-reduced-motion\u003C/code> feature. This was a great chance to play more with it.\u003C/p>\n\u003Cp>\u003Ccode>window.matchMedia('(prefers-reduced-motion: reduce)')\u003C/code> returns an object and \u003Ccode>.matches\u003C/code> provides a boolean for the setting.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> reducedMotionMediaQuery\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> window.\u003C/span>\u003Cspan style=\"color:#B392F0\">matchMedia\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'(prefers-reduced-motion: reduce)'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">reducedMotionMediaQuery.matches) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    startAnimation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Couple this with the handy \u003Ccode>change\u003C/code> event listener, and I can toggle the start/stop of the animation.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> reducedMotionMediaQuery\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> window.\u003C/span>\u003Cspan style=\"color:#B392F0\">matchMedia\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'(prefers-reduced-motion: reduce)'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">reducedMotionMediaQuery.matches) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    startAnimation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">reducedMotionMediaQuery.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'change'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, (\u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (event.matches) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        stopAnimation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        startAnimation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In future iterations (i.e. when I build my own), I’d like to set a fade transition for when it starts/stops the animation. Perhaps a callback for when the transition completes as well. Also, a method to start and stop the animation would be a great improvement.\u003C/p>\n\u003Cp>I also added a mostly opaque background color to the content space to avoid floating particles/edges from distracting from reading. I used \u003Cem>some\u003C/em> transparency though, because frankly, I’m a sucker for see-through effects. An additional \u003Ccode>box-shadow\u003C/code> with a generous spread helps it fade a bit. This content background only shows when the effect is active though.\u003C/p>\n\u003Ch2 id=\"wrap-up\">Wrap Up\u003C/h2>\n\u003Cp>So that wraps my report for the new particle network feature running in the background! As mentioned already, there are a few features I’ll be adding to improve the site/feature:\u003C/p>\n\u003Cul>\n\u003Cli>reduced motion toggle\u003C/li>\n\u003Cli>custom implementation (start/stop methods + transition callback)\u003C/li>\n\u003Cli>theme-sensitivity (after I add a theme toggle…)\u003C/li>\n\u003C/ul>",{"headings":601,"localImagePaths":617,"remoteImagePaths":618,"frontmatter":588,"imagePaths":619},[602,603,606,609,612,615],{"depth":24,"slug":586,"text":589},{"depth":27,"slug":604,"text":605},"learning-the-term","Learning the Term",{"depth":27,"slug":607,"text":608},"experimenting","Experimenting",{"depth":27,"slug":610,"text":611},"giving-it-a-home","Giving It A Home",{"depth":37,"slug":613,"text":614},"accessibility-a11y","Accessibility (a11y)",{"depth":27,"slug":41,"text":616},"Wrap Up",[],[],[],"particle-network-addition.md","particle-network-addition-pt2",{"id":621,"data":623,"body":628,"filePath":629,"digest":630,"rendered":631,"legacyId":650},{"external":12,"draft":12,"title":624,"description":625,"date":626,"tags":627},"Particle Network Addition Part 2","Part two updating my work with the particle network feature of my website",["Date","2025-05-08T00:00:00.000Z"],[337,338,518,593,594],"\u003C!-- https://web.archive.org/web/20150727021631/https://blog.alexwendland.com/2015/particle-network-js-animations/ -->\n\n# Particle Network Addition Part 2\n\nGreetings! The following is a brief update on the work I've been doing on my website to update the Particle Network background effect that's probably floating around (pun intended). Read part 1 if you're interested.\n\nThe updates I've made:\n\n- theme toggle control (separate but related)\n- theme sensitivity\n- custom implementation\n\nLet's dig in!\n\n## Theme Toggle Control\n\nI added a theme toggle control (in the bottom right if I haven't moved it yet). Okay, okay, technically it's \"dark mode/light mode\" toggling; whatever. The animation effect on toggling is one of those fun little flairs I just love adding. The first implementation was fine, but I discovered during the Particle Network update that I had mixed unrelated code…\n\n![Shame Gif](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExeWs4Zmxka2xkZDNiMmoyOXE4OWpvdWVybjBremNuOG8yYjNnZTMwMiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/pDsCoECKh1Pa/giphy.gif)\n\nSo I moved that code to the toggle component where it belongs.\n\nOne funny whoops I ran into was forgetting which CSS library I've been using. I built this site using [Simple.css](https://simplecss.org/) to provide me with… well, very simple CSS styling. Bootstrap is a classic, and I could have gone that route, but I was looking for something simpler and lighter.\n\nTailwind is great in a lot of ways and *really* verbose in the markup. I wanted to keep it lighter still. I haven't done a complex analytical comparison between both implementations, so I don't know if it's actually simpler and lighter or not.\n\nWhat I *thought* I was using was [Pico CSS](https://picocss.com/), another minimal style library that appeals to my interest in just using semantic HTML and making it look good. I like Pico's theme handling approach (for the most part). I fought with my site for a while before I realized I am still using Simple rather than Pico. That explains why the theming features weren't working as expect. 😅\n\n> It's the little things filling your day that will stoke or suffocate your passions.\n\nOne additional change regarding the theme toggle styles I made was to move the updated CSS variables from the `html` tag's inline styles into a dynamically-generated `style` tag. I check for the tag's existence, create and append it if missing, then set the `innerHTML` of the tag. this cleans up the devtool's rendered Elements tag perhaps an arbitrary amount, but enough that *I* like it. I also [re-]learned a fun concise way to create the element if it's not present.\n\n```js\nconst styleId = 'someStyles';\nconst style = document.head.querySelector(`#${styleId}`)\n    ?? Object.assign(document.createElement('style'), { id: styleId });\n```\n\nIt's a silly thing, but doesn't that `Object.assign` remind you a little of jQuery's classically awesome element creation overload? Y'know, the one that looks like this: \n\n```js\n$('\u003Cstyle>', { id: styleId })\n```\n\nWhat a gem. Fond memories. It's the little things filling your day that will stoke or suffocate your passions.\n\n## Theme Sensitivity\n\nNow that I have theme toggle controls, I wanted to make the Particle Network more sensitive. I was brute forcing the theme toggle controls initially (i.e. stopping/starting the lib). I built into the library (upon rewriting it - see below) the ability to update the options and have those changes update the canvas immediately. Not much to it!\n\nOne additional benefit to this update was to locate the \"source of truth\" regarding styles in CSS where I want it and not repeat data that easily falls out-of-sync otherwise. Specifically, the background and particle colors are being set when the theme updates, and I'm grabbing those computed colors when the Particle Network (Astro component) notices the change. It looks something like this:\n\n```js\nconst computedStyle = getComputedStyle(document.documentElement);\nconst particleNetworkOptions = {\n    particleColor: computedStyle.getPropertyValue('--particle'),\n    background: computedStyle.getPropertyValue('--bg'),\n};\n```\n\nThis way, when it gets set and the options need updated, this code can run and just grab the correct values.\n\n## Custom Implementation\n\nThis goal had two facets: (1) to learn the thought process of the Particle Network better and (2) to gain greater control over a cool-but-outdated library. That control is what enabled me to build in the option update and others.\n\nI admit I started the rewrite with some AI help. That rewrote the older code into a TypeScript class for me. Then I picked my way through and cleaned up the unnecessary and hallucinated code. This helped me get familiar with, customize, and study the library more.\n\nThis just seems like one of those features I'll be iterating on over the months and maybe years, so I expect more articles like this discussing updates and lessons learned.\n\n## Wrap Up\n\nSome things I've valued most about this update:\n\n- deeper learning & customization of the Particle Network code\n- integration (and with looser coupling) of independent site components\n- clearly defined \"source of truth\" for styles and a relatively inexpensive way to access them (there *is* some perf cost but not enough to worry)\n\nUntil next time! Keep tinkerin'","src/content/blog/particle-network-addition-pt2.md","290829a1631c5b12",{"html":632,"metadata":633},"\u003C!-- https://web.archive.org/web/20150727021631/https://blog.alexwendland.com/2015/particle-network-js-animations/ -->\n\u003Ch1 id=\"particle-network-addition-part-2\">Particle Network Addition Part 2\u003C/h1>\n\u003Cp>Greetings! The following is a brief update on the work I’ve been doing on my website to update the Particle Network background effect that’s probably floating around (pun intended). Read part 1 if you’re interested.\u003C/p>\n\u003Cp>The updates I’ve made:\u003C/p>\n\u003Cul>\n\u003Cli>theme toggle control (separate but related)\u003C/li>\n\u003Cli>theme sensitivity\u003C/li>\n\u003Cli>custom implementation\u003C/li>\n\u003C/ul>\n\u003Cp>Let’s dig in!\u003C/p>\n\u003Ch2 id=\"theme-toggle-control\">Theme Toggle Control\u003C/h2>\n\u003Cp>I added a theme toggle control (in the bottom right if I haven’t moved it yet). Okay, okay, technically it’s “dark mode/light mode” toggling; whatever. The animation effect on toggling is one of those fun little flairs I just love adding. The first implementation was fine, but I discovered during the Particle Network update that I had mixed unrelated code…\u003C/p>\n\u003Cp>\u003Cimg src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExeWs4Zmxka2xkZDNiMmoyOXE4OWpvdWVybjBremNuOG8yYjNnZTMwMiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/pDsCoECKh1Pa/giphy.gif\" alt=\"Shame Gif\">\u003C/p>\n\u003Cp>So I moved that code to the toggle component where it belongs.\u003C/p>\n\u003Cp>One funny whoops I ran into was forgetting which CSS library I’ve been using. I built this site using \u003Ca href=\"https://simplecss.org/\">Simple.css\u003C/a> to provide me with… well, very simple CSS styling. Bootstrap is a classic, and I could have gone that route, but I was looking for something simpler and lighter.\u003C/p>\n\u003Cp>Tailwind is great in a lot of ways and \u003Cem>really\u003C/em> verbose in the markup. I wanted to keep it lighter still. I haven’t done a complex analytical comparison between both implementations, so I don’t know if it’s actually simpler and lighter or not.\u003C/p>\n\u003Cp>What I \u003Cem>thought\u003C/em> I was using was \u003Ca href=\"https://picocss.com/\">Pico CSS\u003C/a>, another minimal style library that appeals to my interest in just using semantic HTML and making it look good. I like Pico’s theme handling approach (for the most part). I fought with my site for a while before I realized I am still using Simple rather than Pico. That explains why the theming features weren’t working as expect. 😅\u003C/p>\n\u003Cblockquote>\n\u003Cp>It’s the little things filling your day that will stoke or suffocate your passions.\u003C/p>\n\u003C/blockquote>\n\u003Cp>One additional change regarding the theme toggle styles I made was to move the updated CSS variables from the \u003Ccode>html\u003C/code> tag’s inline styles into a dynamically-generated \u003Ccode>style\u003C/code> tag. I check for the tag’s existence, create and append it if missing, then set the \u003Ccode>innerHTML\u003C/code> of the tag. this cleans up the devtool’s rendered Elements tag perhaps an arbitrary amount, but enough that \u003Cem>I\u003C/em> like it. I also [re-]learned a fun concise way to create the element if it’s not present.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> styleId\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'someStyles'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> style\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> document.head.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`#${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">styleId\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    ??\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">assign\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(document.\u003C/span>\u003Cspan style=\"color:#B392F0\">createElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'style'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">), { id: styleId });\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>It’s a silly thing, but doesn’t that \u003Ccode>Object.assign\u003C/code> remind you a little of jQuery’s classically awesome element creation overload? Y’know, the one that looks like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">$\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'&#x3C;style>'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, { id: styleId })\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>What a gem. Fond memories. It’s the little things filling your day that will stoke or suffocate your passions.\u003C/p>\n\u003Ch2 id=\"theme-sensitivity\">Theme Sensitivity\u003C/h2>\n\u003Cp>Now that I have theme toggle controls, I wanted to make the Particle Network more sensitive. I was brute forcing the theme toggle controls initially (i.e. stopping/starting the lib). I built into the library (upon rewriting it - see below) the ability to update the options and have those changes update the canvas immediately. Not much to it!\u003C/p>\n\u003Cp>One additional benefit to this update was to locate the “source of truth” regarding styles in CSS where I want it and not repeat data that easily falls out-of-sync otherwise. Specifically, the background and particle colors are being set when the theme updates, and I’m grabbing those computed colors when the Particle Network (Astro component) notices the change. It looks something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> computedStyle\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> getComputedStyle\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(document.documentElement);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> particleNetworkOptions\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    particleColor: computedStyle.\u003C/span>\u003Cspan style=\"color:#B392F0\">getPropertyValue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'--particle'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    background: computedStyle.\u003C/span>\u003Cspan style=\"color:#B392F0\">getPropertyValue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'--bg'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This way, when it gets set and the options need updated, this code can run and just grab the correct values.\u003C/p>\n\u003Ch2 id=\"custom-implementation\">Custom Implementation\u003C/h2>\n\u003Cp>This goal had two facets: (1) to learn the thought process of the Particle Network better and (2) to gain greater control over a cool-but-outdated library. That control is what enabled me to build in the option update and others.\u003C/p>\n\u003Cp>I admit I started the rewrite with some AI help. That rewrote the older code into a TypeScript class for me. Then I picked my way through and cleaned up the unnecessary and hallucinated code. This helped me get familiar with, customize, and study the library more.\u003C/p>\n\u003Cp>This just seems like one of those features I’ll be iterating on over the months and maybe years, so I expect more articles like this discussing updates and lessons learned.\u003C/p>\n\u003Ch2 id=\"wrap-up\">Wrap Up\u003C/h2>\n\u003Cp>Some things I’ve valued most about this update:\u003C/p>\n\u003Cul>\n\u003Cli>deeper learning &#x26; customization of the Particle Network code\u003C/li>\n\u003Cli>integration (and with looser coupling) of independent site components\u003C/li>\n\u003Cli>clearly defined “source of truth” for styles and a relatively inexpensive way to access them (there \u003Cem>is\u003C/em> some perf cost but not enough to worry)\u003C/li>\n\u003C/ul>\n\u003Cp>Until next time! Keep tinkerin’\u003C/p>",{"headings":634,"localImagePaths":647,"remoteImagePaths":648,"frontmatter":623,"imagePaths":649},[635,637,640,643,646],{"depth":24,"slug":636,"text":624},"particle-network-addition-part-2",{"depth":27,"slug":638,"text":639},"theme-toggle-control","Theme Toggle Control",{"depth":27,"slug":641,"text":642},"theme-sensitivity","Theme Sensitivity",{"depth":27,"slug":644,"text":645},"custom-implementation","Custom Implementation",{"depth":27,"slug":41,"text":616},[],[],[],"particle-network-addition-pt2.md","web-camera-component",{"id":651,"data":653,"body":660,"filePath":661,"digest":662,"rendered":663,"legacyId":696},{"external":12,"draft":12,"title":654,"description":655,"date":656,"tags":657},"Web Camera Component","Web components and how I implemented one finally",["Date","2025-05-09T00:00:00.000Z"],[337,338,518,593,658,659],"video","webcomponent","# Web Camera Component\n\nI've been wanting to figure out web components for quite some time now. After a few attempts that established it wasn't a totally trivial affair, I gave it some time and finally buckled down. This post will explore the `web-camera` component I made, which requests access to your device's web cam, displays a stream of video, and captures photos to a canvas element. Let's get started.\n\n## What Are Web Components?\n\nWeb components (wc) are a way of authoring reusable code that typically involves at least one of the following web APIs: [custom elements](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements), [shadow DOM](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM), [templates, and slots](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots). [Learn more about them at MDN.](https://developer.mozilla.org/en-US/docs/Web/API/Web_components) Additionally, [Dave Rupert](https://daverupert.com/tag/webcomponents/) has written extensively about this topic.\n\nOne retroactive reason I'm such a big fan of Vue.js has been how much it's helped build a foundation of knowledge surrounding these topics. All component libraries (Vue, React, Angular, Svelte, etc.) help teach the value of custom elements. To the extent that any of them enable devs to write styles scoped to the component, they imperfectly illustrate the shadow DOM as well. Vue specifically uses `template` and `slot` in its SFCs (single-file components), which was helpful as a sort of [\"near-transfer\" of knowledge](https://en.wikipedia.org/wiki/Transfer_of_learning#Transfer_taxonomies).\n\n```html\n\u003C!-- ButtonLoader.vue -->\n\u003C!-- Vue uses `template` to define markup in .vue files; wc do the same -->\n\u003Ctemplate>\n  \u003C!-- Vue's short-hand click listener to bubble the event up -->\n  \u003Cbutton @click=\"$emit('click', $event)\">\n    \u003C!-- `loading` could be a Vue prop; wc -->\n    \u003Cspan v-show=\"loading\" class=\"btn-loader\" aria-label=\"Button Loading…\">\u003C/span>\n    \u003C!-- \"Default\" slot when unspecified; true for both Vue and wc -->\n    \u003Cslot>\u003C/slot>\n  \u003C/button>\n\u003C/template>\n```\n\nOne caveat I've noticed so far has been that native web components don't (currently) support data binding to slots, so if you want to pass specific data to a slot, you'll have to figure out a different way. I have not explored this much beyond the initial discovery, so maybe I'm missing something.\n\n```html\n\u003Ctemplate>\n  \u003Cbutton>\n    \u003C!-- Vue ✅ wc ❌ -->\n    \u003Cslot :foo=\"foo\">\u003C/slot>\n  \u003C/button>\n\u003C/template>\n```\n\n## My Dependencies\n\nTypeScript & Vite for bundling and type safety/help; modern browsers\n\nFor my `web-camera` component, I used TypeScript for type safety/helpers and Vite to bundle the files. Technically, this could all be done with vanilla JS and no bundler too. The primary downside there is the async needed to fetch the markup and a way to reliably reference the markup path. See more below for my [file organization](#file-organization).\n\nAnother dependency is obviously a modern browser with support of the features being used. I've not tested the limits of each browser, but I recall that Safari is slow to adopt of of the web component features. Depending on how bought-in your component is, there may be no issue.\n\n## File Organization\n\nTo begin, I've been organizing my component files via co-location just like I do in Vue. Minimally (depending on the complexity of the markup), there are 2 files: web-camera.ts & web-camera.html. These usually live in a directory named accordingly:\n\n```\n/web-camera\n  /web-camera.html\n  /web-camera.ts\n```\n\nThe reason for co-locating the web components in a directory named the same way is minimally two-fold:\n\n1. co-location within a folder encourages modularity (and prospective unit testing)\n2. naming the file(s) the same as the directory makes it easier to differentiate between multiple component files of the same extension (e.g. web-camera.ts vs index.ts or component.ts)\n\nIf a bundler is being used, another option is to add a `package.json` file the the following contents:\n\n```json\n{\n  \"main\": \"web-camera.ts\"\n}\n```\n\nThis style of authoring allows both #2 listed above *and* a bonus of cleaner/more concise import statements.\n\n```js\nimport { WebCamera } from '@/components/web-camera';\n// vs\nimport { WebCamera } from '@/components/web-camera/web-camera.ts';\n```\n\nOther helpful files can be defined here: `models.ts`, `constants.ts`, `events.ts`, etc. Also, any assets like images or fonts could be stored in this shared directory for easy access.\n\n## Markup Initialization\n\nThe TS file imports (and bundles via Vite) the HTML markup string, which is then instantiated as a DOM node(s). To do this, I create a `div` (detached from the DOM tree), set the `innerHTML` to the imported string, then grab the `firstChild`. That is attached to the component.\n\n```js\nimport templateStr from './web-camera.html?raw'; // ?raw is from Vite https://vite.dev/guide/assets#importing-asset-as-string\nconst div = document.createElement('div');\ndiv.innerHTML = templateStr;\nconst template = div.firstChild;\n// inside the component's constructor()…\n// if appending to light DOM\nthis.appendChild(templateEl.content.cloneNode(true));\n// if appending to shadow DOM\nthis.shadowRoot(templateEl.content.cloneNode(true));\n```\n\nI originally tried setting the component's innerHTML to the `templateStr`, but that risked losing slot contents and didn't work. `Document.parseHTMLUnsafe()` is another option, though the name is not inviting, but the instantiated DOM is deeper than a simple `div`. Surprisingly, document fragments don't work either. I've not gone deeper into exploring this and the reason why.\n\n```js\n// inside constructor()\nthis.innerHTML = templateStr; // nope\nDocument.parseHTMLUnsafe(templateStr).body.firstChild; // another option but meh\n```\n\n## Issues with Shadow DOM\n\nOne peculiar issue I haven't investigated occurred when trying to write to the `canvas` within the shadow DOM. I could stream the media device (webcam) to the `video` correctly, but when trying to capture a snapshot of the stream and draw it to the `canvas`, it didn't work until I removed use of the shadow DOM. There are quirks when dealing with the shadow DOM, so this wasn't totally surprising. I'd like to investigate this more some day, but it was not a rabbit trail for today.\n\n## Attributes & Events\n\n**Attributes** are the way to pass along Initialization options. Nothing is passed into the constructor. After calling `super()` within the `constructor()` method, the tag's attributes can be read.\n\n```ts\nclass WebCamera extends HTMLElement {\n  constructor() {\n    super();\n    this.getAttribute('data-foo') === 'bar'; // assumes \u003Cweb-camera data-foo=\"bar\">\u003C/web-camera>\n  }\n}\n```\n\nNote that attributes read this way are always strings, so if they could be numbers, booleans, etc., they must be cast as such. More complex validation likely requires duck typing.\n\nSome version of data reactivity through attributes is available using `attributeChangedCallback()`. This is one of several [custom element lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements#custom_element_lifecycle_callbacks).\n\n```ts\nattributeChangedCallback(attrName: string, oldValue: string, newValue: string) {\n  if (attrName === 'foo') {\n    // handle newValue and maybe consider oldValue - possibly update an internal options object if helpful\n  }\n}\n```\n\nJust as props allow passing *in* information to the component in React, Vue, etc., attributes do the same for web components.\n\n**Events** similarly allow passing data *out* from the web component. Natively-defined events like `click`, `keyup`, and others can be emitted. Other options exist for custom events like the (surprise surprise) [`CustomEvent` class](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent) may be used.\n\nFor `web-camera`, I'm emitting some lifecycle events like `created` (called at the end of the constructor) and `mounted` (called at the end of `connectedCallback` life cycle hook). I also emit events when the video camera stream starts and stops, as well as when photos are captured (which includes the captured image in the `detail` detail map). Consumers can listen just like any other element.\n\n```js\ndocument.querySelector('web-camera')?.addEventListener('capture-frame', event => {…});\n```\n\n## Photo Handling\n\nAs mentioned, the photo capture emits an event (i.e. `capture-frame`) that can be handled. The photo can be extracted from here.\n\n```ts\ndocument.querySelector('web-camera')?.addEventListener('capture-frame', (event) => {\n  event.detail.image; // blob or base64 string\n});\n```\n\nAdditionally, if the photo is capture programmatically (like if the consumer wants to use custom-styled buttons or perform capture events invisibly, e.g. during an online test to detect fraud), the image will be returned from the method call.\n\n```ts\nconst image = await webCamera.captureFrame();\n```\n\nThe capture type can be defined via attribute. The capture format returns a `Blob` object by default, but a base64 encoded image can optionally be returned.\n\n```html\n\u003C!-- PNG Blob default -->\n\u003Cweb-camera>\u003C/web-camera>\n\u003C!-- JPG base64 -->\n\u003Cweb-camera capture-type=\"jpg\" capture-encoded=\"true\">\u003C/web-camera>\n\u003C!-- JPG base64; shorthand encoding opt-in -->\n\u003Cweb-camera capture-type=\"jpg\" capture-encoded>\u003C/web-camera>\n```\n\n## Potential Improvements\n\nOne idea I have for an improvement is to provide slot controls for the capture button, or any additional buttons. This isn't strictly necessary as the buttons can simply be hidden via CSS, but it would plausibly reduce the amount of markup floating around.\n\n```css\nweb-camera button { display: none; }\n```\n\nAnother far-out idea would be to figure out how to use photo/video filtering libraries and allow the user to toggle between different blend modes and filters like sepia, black & white, etc. I must test more with mobile devices and multiple streaming inputs to account for different cameras. Similarly, if I ever need to handle audio input, I'll need attributes factoring those in.\n\n## Conclusion\n\nThis has been tons-o-fun! I wrote this webcam library back in 2020 and love that I finally rewrote it with web components in mind. I look forward to building up a set of tools using web components and getting to know this excellent set of APIs better.\n\nA solid # TODO would be to implement some working examples here to provide better illustration of the web component in action. Feel free to check it out [on my GitHub](https://github.com/Made-of-Clay/adamleis/tree/master/src/web-components/web-camera) for now.","src/content/blog/web-camera-component.md","44b2d74510e9b199",{"html":664,"metadata":665},"\u003Ch1 id=\"web-camera-component\">Web Camera Component\u003C/h1>\n\u003Cp>I’ve been wanting to figure out web components for quite some time now. After a few attempts that established it wasn’t a totally trivial affair, I gave it some time and finally buckled down. This post will explore the \u003Ccode>web-camera\u003C/code> component I made, which requests access to your device’s web cam, displays a stream of video, and captures photos to a canvas element. Let’s get started.\u003C/p>\n\u003Ch2 id=\"what-are-web-components\">What Are Web Components?\u003C/h2>\n\u003Cp>Web components (wc) are a way of authoring reusable code that typically involves at least one of the following web APIs: \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements\">custom elements\u003C/a>, \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM\">shadow DOM\u003C/a>, \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots\">templates, and slots\u003C/a>. \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components\">Learn more about them at MDN.\u003C/a> Additionally, \u003Ca href=\"https://daverupert.com/tag/webcomponents/\">Dave Rupert\u003C/a> has written extensively about this topic.\u003C/p>\n\u003Cp>One retroactive reason I’m such a big fan of Vue.js has been how much it’s helped build a foundation of knowledge surrounding these topics. All component libraries (Vue, React, Angular, Svelte, etc.) help teach the value of custom elements. To the extent that any of them enable devs to write styles scoped to the component, they imperfectly illustrate the shadow DOM as well. Vue specifically uses \u003Ccode>template\u003C/code> and \u003Ccode>slot\u003C/code> in its SFCs (single-file components), which was helpful as a sort of \u003Ca href=\"https://en.wikipedia.org/wiki/Transfer_of_learning#Transfer_taxonomies\">“near-transfer” of knowledge\u003C/a>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- ButtonLoader.vue -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- Vue uses `template` to define markup in .vue files; wc do the same -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">template\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  &#x3C;!-- Vue's short-hand click listener to bubble the event up -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> @click\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"$emit('click', $event)\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    &#x3C;!-- `loading` could be a Vue prop; wc -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#B392F0\"> v-show\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"loading\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"btn-loader\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> aria-label\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Button Loading…\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    &#x3C;!-- \"Default\" slot when unspecified; true for both Vue and wc -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">slot\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">slot\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">template\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>One caveat I’ve noticed so far has been that native web components don’t (currently) support data binding to slots, so if you want to pass specific data to a slot, you’ll have to figure out a different way. I have not explored this much beyond the initial discovery, so maybe I’m missing something.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">template\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    &#x3C;!-- Vue ✅ wc ❌ -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">slot\u003C/span>\u003Cspan style=\"color:#B392F0\"> :foo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"foo\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">slot\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">template\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"my-dependencies\">My Dependencies\u003C/h2>\n\u003Cp>TypeScript &#x26; Vite for bundling and type safety/help; modern browsers\u003C/p>\n\u003Cp>For my \u003Ccode>web-camera\u003C/code> component, I used TypeScript for type safety/helpers and Vite to bundle the files. Technically, this could all be done with vanilla JS and no bundler too. The primary downside there is the async needed to fetch the markup and a way to reliably reference the markup path. See more below for my \u003Ca href=\"#file-organization\">file organization\u003C/a>.\u003C/p>\n\u003Cp>Another dependency is obviously a modern browser with support of the features being used. I’ve not tested the limits of each browser, but I recall that Safari is slow to adopt of of the web component features. Depending on how bought-in your component is, there may be no issue.\u003C/p>\n\u003Ch2 id=\"file-organization\">File Organization\u003C/h2>\n\u003Cp>To begin, I’ve been organizing my component files via co-location just like I do in Vue. Minimally (depending on the complexity of the markup), there are 2 files: web-camera.ts &#x26; web-camera.html. These usually live in a directory named accordingly:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>/web-camera\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /web-camera.html\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /web-camera.ts\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The reason for co-locating the web components in a directory named the same way is minimally two-fold:\u003C/p>\n\u003Col>\n\u003Cli>co-location within a folder encourages modularity (and prospective unit testing)\u003C/li>\n\u003Cli>naming the file(s) the same as the directory makes it easier to differentiate between multiple component files of the same extension (e.g. web-camera.ts vs index.ts or component.ts)\u003C/li>\n\u003C/ol>\n\u003Cp>If a bundler is being used, another option is to add a \u003Ccode>package.json\u003C/code> file the the following contents:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"main\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"web-camera.ts\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This style of authoring allows both #2 listed above \u003Cem>and\u003C/em> a bonus of cleaner/more concise import statements.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { WebCamera } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/components/web-camera'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// vs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { WebCamera } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/components/web-camera/web-camera.ts'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Other helpful files can be defined here: \u003Ccode>models.ts\u003C/code>, \u003Ccode>constants.ts\u003C/code>, \u003Ccode>events.ts\u003C/code>, etc. Also, any assets like images or fonts could be stored in this shared directory for easy access.\u003C/p>\n\u003Ch2 id=\"markup-initialization\">Markup Initialization\u003C/h2>\n\u003Cp>The TS file imports (and bundles via Vite) the HTML markup string, which is then instantiated as a DOM node(s). To do this, I create a \u003Ccode>div\u003C/code> (detached from the DOM tree), set the \u003Ccode>innerHTML\u003C/code> to the imported string, then grab the \u003Ccode>firstChild\u003C/code>. That is attached to the component.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> templateStr \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './web-camera.html?raw'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// ?raw is from Vite https://vite.dev/guide/assets#importing-asset-as-string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> div\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> document.\u003C/span>\u003Cspan style=\"color:#B392F0\">createElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'div'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">div.innerHTML \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> templateStr;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> template\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> div.firstChild;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// inside the component's constructor()…\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// if appending to light DOM\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">appendChild\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(templateEl.content.\u003C/span>\u003Cspan style=\"color:#B392F0\">cloneNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// if appending to shadow DOM\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">shadowRoot\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(templateEl.content.\u003C/span>\u003Cspan style=\"color:#B392F0\">cloneNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I originally tried setting the component’s innerHTML to the \u003Ccode>templateStr\u003C/code>, but that risked losing slot contents and didn’t work. \u003Ccode>Document.parseHTMLUnsafe()\u003C/code> is another option, though the name is not inviting, but the instantiated DOM is deeper than a simple \u003Ccode>div\u003C/code>. Surprisingly, document fragments don’t work either. I’ve not gone deeper into exploring this and the reason why.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// inside constructor()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.innerHTML \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> templateStr; \u003C/span>\u003Cspan style=\"color:#6A737D\">// nope\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Document.\u003C/span>\u003Cspan style=\"color:#B392F0\">parseHTMLUnsafe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(templateStr).body.firstChild; \u003C/span>\u003Cspan style=\"color:#6A737D\">// another option but meh\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"issues-with-shadow-dom\">Issues with Shadow DOM\u003C/h2>\n\u003Cp>One peculiar issue I haven’t investigated occurred when trying to write to the \u003Ccode>canvas\u003C/code> within the shadow DOM. I could stream the media device (webcam) to the \u003Ccode>video\u003C/code> correctly, but when trying to capture a snapshot of the stream and draw it to the \u003Ccode>canvas\u003C/code>, it didn’t work until I removed use of the shadow DOM. There are quirks when dealing with the shadow DOM, so this wasn’t totally surprising. I’d like to investigate this more some day, but it was not a rabbit trail for today.\u003C/p>\n\u003Ch2 id=\"attributes--events\">Attributes &#x26; Events\u003C/h2>\n\u003Cp>\u003Cstrong>Attributes\u003C/strong> are the way to pass along Initialization options. Nothing is passed into the constructor. After calling \u003Ccode>super()\u003C/code> within the \u003Ccode>constructor()\u003C/code> method, the tag’s attributes can be read.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> WebCamera\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> HTMLElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    super\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getAttribute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'data-foo'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'bar'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// assumes &#x3C;web-camera data-foo=\"bar\">&#x3C;/web-camera>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Note that attributes read this way are always strings, so if they could be numbers, booleans, etc., they must be cast as such. More complex validation likely requires duck typing.\u003C/p>\n\u003Cp>Some version of data reactivity through attributes is available using \u003Ccode>attributeChangedCallback()\u003C/code>. This is one of several \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements#custom_element_lifecycle_callbacks\">custom element lifecycle callbacks\u003C/a>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">attributeChangedCallback\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(attrName: string, oldValue: string, newValue: string) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (attrName \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'foo'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // handle newValue and maybe consider oldValue - possibly update an internal options object if helpful\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Just as props allow passing \u003Cem>in\u003C/em> information to the component in React, Vue, etc., attributes do the same for web components.\u003C/p>\n\u003Cp>\u003Cstrong>Events\u003C/strong> similarly allow passing data \u003Cem>out\u003C/em> from the web component. Natively-defined events like \u003Ccode>click\u003C/code>, \u003Ccode>keyup\u003C/code>, and others can be emitted. Other options exist for custom events like the (surprise surprise) \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\">\u003Ccode>CustomEvent\u003C/code> class\u003C/a> may be used.\u003C/p>\n\u003Cp>For \u003Ccode>web-camera\u003C/code>, I’m emitting some lifecycle events like \u003Ccode>created\u003C/code> (called at the end of the constructor) and \u003Ccode>mounted\u003C/code> (called at the end of \u003Ccode>connectedCallback\u003C/code> life cycle hook). I also emit events when the video camera stream starts and stops, as well as when photos are captured (which includes the captured image in the \u003Ccode>detail\u003C/code> detail map). Consumers can listen just like any other element.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">document.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'web-camera'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)?.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'capture-frame'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {…});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"photo-handling\">Photo Handling\u003C/h2>\n\u003Cp>As mentioned, the photo capture emits an event (i.e. \u003Ccode>capture-frame\u003C/code>) that can be handled. The photo can be extracted from here.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">document.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'web-camera'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)?.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'capture-frame'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, (\u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  event.detail.image; \u003C/span>\u003Cspan style=\"color:#6A737D\">// blob or base64 string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Additionally, if the photo is capture programmatically (like if the consumer wants to use custom-styled buttons or perform capture events invisibly, e.g. during an online test to detect fraud), the image will be returned from the method call.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> image\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> webCamera.\u003C/span>\u003Cspan style=\"color:#B392F0\">captureFrame\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The capture type can be defined via attribute. The capture format returns a \u003Ccode>Blob\u003C/code> object by default, but a base64 encoded image can optionally be returned.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- PNG Blob default -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">web-camera\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">web-camera\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- JPG base64 -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">web-camera\u003C/span>\u003Cspan style=\"color:#B392F0\"> capture-type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"jpg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> capture-encoded\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"true\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">web-camera\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- JPG base64; shorthand encoding opt-in -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">web-camera\u003C/span>\u003Cspan style=\"color:#B392F0\"> capture-type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"jpg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> capture-encoded\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">web-camera\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"potential-improvements\">Potential Improvements\u003C/h2>\n\u003Cp>One idea I have for an improvement is to provide slot controls for the capture button, or any additional buttons. This isn’t strictly necessary as the buttons can simply be hidden via CSS, but it would plausibly reduce the amount of markup floating around.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">web-camera\u003C/span>\u003Cspan style=\"color:#85E89D\"> button\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">none\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Another far-out idea would be to figure out how to use photo/video filtering libraries and allow the user to toggle between different blend modes and filters like sepia, black &#x26; white, etc. I must test more with mobile devices and multiple streaming inputs to account for different cameras. Similarly, if I ever need to handle audio input, I’ll need attributes factoring those in.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>This has been tons-o-fun! I wrote this webcam library back in 2020 and love that I finally rewrote it with web components in mind. I look forward to building up a set of tools using web components and getting to know this excellent set of APIs better.\u003C/p>\n\u003Cp>A solid # TODO would be to implement some working examples here to provide better illustration of the web component in action. Feel free to check it out \u003Ca href=\"https://github.com/Made-of-Clay/adamleis/tree/master/src/web-components/web-camera\">on my GitHub\u003C/a> for now.\u003C/p>",{"headings":666,"localImagePaths":693,"remoteImagePaths":694,"frontmatter":653,"imagePaths":695},[667,668,671,674,677,680,683,686,689,692],{"depth":24,"slug":651,"text":654},{"depth":27,"slug":669,"text":670},"what-are-web-components","What Are Web Components?",{"depth":27,"slug":672,"text":673},"my-dependencies","My Dependencies",{"depth":27,"slug":675,"text":676},"file-organization","File Organization",{"depth":27,"slug":678,"text":679},"markup-initialization","Markup Initialization",{"depth":27,"slug":681,"text":682},"issues-with-shadow-dom","Issues with Shadow DOM",{"depth":27,"slug":684,"text":685},"attributes--events","Attributes & Events",{"depth":27,"slug":687,"text":688},"photo-handling","Photo Handling",{"depth":27,"slug":690,"text":691},"potential-improvements","Potential Improvements",{"depth":27,"slug":180,"text":181},[],[],[],"web-camera-component.md","learning-displacement-threejs",{"id":697,"data":699,"body":706,"filePath":707,"assetImports":708,"digest":713,"rendered":714,"legacyId":735},{"external":12,"draft":12,"title":700,"description":701,"date":702,"tags":703},"Three.js Learning: Displacement Maps","I share some thoughts and lessons learned on the topic of displacement maps.",["Date","2025-06-10T00:00:00.000Z"],[337,338,704,705],"threejs","webgl","# Three.js Learning: Displacement Maps\n\nI've been learning Three.js more in-depth the past couple of weeks. It's been a long-held desire to get into the weeds, and I finally pulled the trigger. (Shout out to [Bruno Simon](https://x.com/bruno_simon)'s amazing [Three.js Journey](https://threejs-journey.com/)!)\n\nOne concept I've been playing with to understand it better is displacement maps. I specifically wondered how I might shape terrain just by painting an image in real time. While I'm lacking the \"real time\" shaping (though it's not hard to see how I'd handle it), the painting part came together easily.\n\n## What Are Displacement Maps?\n\n> The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh. - [Three.js Docs](https://threejs.org/docs/?q=plane#api/en/materials/MeshStandardMaterial.displacementMap)\n\nA displacement map is a black-and-white image that affects the mesh vertices. White is up, black is down, and the amount of \"up\" is determined by the [`displacementScale` property](https://threejs.org/docs/?q=plane#api/en/materials/MeshStandardMaterial.displacementScale).\n\nThis means terrain can be \"built\" from a plane with enough triangles and a good displacement map.\n\n## My Play Examples\n\nTo get a sense of how this works and how easily it can be manipulated, I opened a photo editor and started painting.\n\n![displacement map example](./images/threejs-displacement/displacement-map.webp)\n\nThis goofy smiley is then applied to the scene's plane mesh and we get an equally goofy shape!\n\n```ts\nconst textureLoader = new THREE.TextureLoader();\nconst checkerTexture = textureLoader.load('/checkers.jpg');\nconst displacementMap = textureLoader.load('/displacement-map.webp');\nconst bumpMap = textureLoader.load('/bump-map.webp');\n// tiling requires some manual configuration; womp womp\ncheckerTexture.repeat.set(8, 8);\ncheckerTexture.wrapS = THREE.RepeatWrapping;\ncheckerTexture.wrapT = THREE.RepeatWrapping;\n\nconst planeGeometry = new THREE.PlaneGeometry(10, 10, 50, 50);\nconst planeMaterial = new THREE.MeshStandardMaterial({\n    color: 'white',\n    map: checkerTexture,\n    bumpMap,\n    displacementMap,\n    displacementScale: 1,\n});\n\nconst plane = new THREE.Mesh(planeGeometry, planeMaterial);\nplane.rotation.x = -Math.PI / 2;\nscene.add(plane);\n```\n\n![displaced mesh example](./images/threejs-displacement/displaced-mesh.webp)\n\nI also noticed my checker pattern is one column off from tiling correctly - whoops! (That's why some rows have extra wide blocks that make the whole tiled texture look columnated.)\n\n(Also, note to self: if Three.js examples become more common on my site, I'd like to have live interactive demo code.)\n\nNotice also the \"BK Displ.\" written text on the displacement map and how it translates to the mesh from the screenshot. It's not immediately clear that's what's written on the map. That's because the poly count is not high enough, and perhaps the resolution of the map is too low. More tinkering would reveal which/both.\n\n## More Common Examples\n\nDisplacement maps (and bump maps, which are much smaller, i.e. for bumps) usually align with their color textures. For example, this brick texture…\n\n![brick texture](./images/threejs-displacement/bricks-texture-map.webp)\n\n… should be used with this brick displacement map.\n\n![brick displacement map](./images/threejs-displacement/bricks-displacement-map.webp)\n\n([Brick example taken from Poly Haven](https://polyhaven.com/a/broken_brick_wall). [Props to Amal Kumar](https://polyhaven.com/all?a=Amal%20Kumar))\n\n## Wrap It Up, Chatty\n\nWhether you're adding extra detail to a scene/texture or literally shaping the scene's environment and landscape, displacement maps are an awesome tool in the tool belt. Learn its powers well, and the quality of your scenes will improve accordingly.\n\nHappy learning, all!","src/content/blog/learning-displacement-threejs.md",[709,710,711,712],"./images/threejs-displacement/displacement-map.webp","./images/threejs-displacement/displaced-mesh.webp","./images/threejs-displacement/bricks-texture-map.webp","./images/threejs-displacement/bricks-displacement-map.webp","a0b4ef49b646170e",{"html":715,"metadata":716},"\u003Ch1 id=\"threejs-learning-displacement-maps\">Three.js Learning: Displacement Maps\u003C/h1>\n\u003Cp>I’ve been learning Three.js more in-depth the past couple of weeks. It’s been a long-held desire to get into the weeds, and I finally pulled the trigger. (Shout out to \u003Ca href=\"https://x.com/bruno_simon\">Bruno Simon\u003C/a>’s amazing \u003Ca href=\"https://threejs-journey.com/\">Three.js Journey\u003C/a>!)\u003C/p>\n\u003Cp>One concept I’ve been playing with to understand it better is displacement maps. I specifically wondered how I might shape terrain just by painting an image in real time. While I’m lacking the “real time” shaping (though it’s not hard to see how I’d handle it), the painting part came together easily.\u003C/p>\n\u003Ch2 id=\"what-are-displacement-maps\">What Are Displacement Maps?\u003C/h2>\n\u003Cblockquote>\n\u003Cp>The displacement map affects the position of the mesh’s vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh. - \u003Ca href=\"https://threejs.org/docs/?q=plane#api/en/materials/MeshStandardMaterial.displacementMap\">Three.js Docs\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cp>A displacement map is a black-and-white image that affects the mesh vertices. White is up, black is down, and the amount of “up” is determined by the \u003Ca href=\"https://threejs.org/docs/?q=plane#api/en/materials/MeshStandardMaterial.displacementScale\">\u003Ccode>displacementScale\u003C/code> property\u003C/a>.\u003C/p>\n\u003Cp>This means terrain can be “built” from a plane with enough triangles and a good displacement map.\u003C/p>\n\u003Ch2 id=\"my-play-examples\">My Play Examples\u003C/h2>\n\u003Cp>To get a sense of how this works and how easily it can be manipulated, I opened a photo editor and started painting.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./images/threejs-displacement/displacement-map.webp&#x22;,&#x22;alt&#x22;:&#x22;displacement map example&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>This goofy smiley is then applied to the scene’s plane mesh and we get an equally goofy shape!\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> textureLoader\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> THREE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">TextureLoader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> checkerTexture\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> textureLoader.\u003C/span>\u003Cspan style=\"color:#B392F0\">load\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/checkers.jpg'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> displacementMap\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> textureLoader.\u003C/span>\u003Cspan style=\"color:#B392F0\">load\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/displacement-map.webp'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> bumpMap\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> textureLoader.\u003C/span>\u003Cspan style=\"color:#B392F0\">load\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/bump-map.webp'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// tiling requires some manual configuration; womp womp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">checkerTexture.repeat.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">checkerTexture.wrapS \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> THREE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.RepeatWrapping;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">checkerTexture.wrapT \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> THREE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.RepeatWrapping;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> planeGeometry\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> THREE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">PlaneGeometry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> planeMaterial\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> THREE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">MeshStandardMaterial\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    color: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'white'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    map: checkerTexture,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    bumpMap,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    displacementMap,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    displacementScale: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> plane\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> THREE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Mesh\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(planeGeometry, planeMaterial);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">plane.rotation.x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Math.\u003C/span>\u003Cspan style=\"color:#79B8FF\">PI\u003C/span>\u003Cspan style=\"color:#F97583\"> /\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">scene.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(plane);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./images/threejs-displacement/displaced-mesh.webp&#x22;,&#x22;alt&#x22;:&#x22;displaced mesh example&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>I also noticed my checker pattern is one column off from tiling correctly - whoops! (That’s why some rows have extra wide blocks that make the whole tiled texture look columnated.)\u003C/p>\n\u003Cp>(Also, note to self: if Three.js examples become more common on my site, I’d like to have live interactive demo code.)\u003C/p>\n\u003Cp>Notice also the “BK Displ.” written text on the displacement map and how it translates to the mesh from the screenshot. It’s not immediately clear that’s what’s written on the map. That’s because the poly count is not high enough, and perhaps the resolution of the map is too low. More tinkering would reveal which/both.\u003C/p>\n\u003Ch2 id=\"more-common-examples\">More Common Examples\u003C/h2>\n\u003Cp>Displacement maps (and bump maps, which are much smaller, i.e. for bumps) usually align with their color textures. For example, this brick texture…\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./images/threejs-displacement/bricks-texture-map.webp&#x22;,&#x22;alt&#x22;:&#x22;brick texture&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>… should be used with this brick displacement map.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./images/threejs-displacement/bricks-displacement-map.webp&#x22;,&#x22;alt&#x22;:&#x22;brick displacement map&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>(\u003Ca href=\"https://polyhaven.com/a/broken_brick_wall\">Brick example taken from Poly Haven\u003C/a>. \u003Ca href=\"https://polyhaven.com/all?a=Amal%20Kumar\">Props to Amal Kumar\u003C/a>)\u003C/p>\n\u003Ch2 id=\"wrap-it-up-chatty\">Wrap It Up, Chatty\u003C/h2>\n\u003Cp>Whether you’re adding extra detail to a scene/texture or literally shaping the scene’s environment and landscape, displacement maps are an awesome tool in the tool belt. Learn its powers well, and the quality of your scenes will improve accordingly.\u003C/p>\n\u003Cp>Happy learning, all!\u003C/p>",{"headings":717,"localImagePaths":732,"remoteImagePaths":733,"frontmatter":699,"imagePaths":734},[718,720,723,726,729],{"depth":24,"slug":719,"text":700},"threejs-learning-displacement-maps",{"depth":27,"slug":721,"text":722},"what-are-displacement-maps","What Are Displacement Maps?",{"depth":27,"slug":724,"text":725},"my-play-examples","My Play Examples",{"depth":27,"slug":727,"text":728},"more-common-examples","More Common Examples",{"depth":27,"slug":730,"text":731},"wrap-it-up-chatty","Wrap It Up, Chatty",[709,710,711,712],[],[709,710,711,712],"learning-displacement-threejs.md","threejs-journey-aug-25-aquarium",{"id":736,"data":738,"body":744,"filePath":745,"assetImports":746,"digest":749,"rendered":750,"legacyId":785},{"external":12,"draft":12,"title":739,"description":740,"date":741,"tags":742},"Three.js Journey August '25 Challenge: Aquarium","An explanation of how I worked through the Three.js Journey August 2025 challenge.",["Date","2025-09-23T00:00:00.000Z"],[337,704,743],"creative","# Three.js Journey August '25 Challenge: Aquarium\n\nI began the Three.js Journey course in May 2025. June 2025 presented the 'castle' challenge, but I was a bit unprepared and didn't appreciate the value of stating focused on an MVP (minimum viable \"project\" in this case).\n\nThis second challenge I'll attempt, I have been keeping my focus on the basics.\n\n## The Aquarium\n\n\u003Ca href=\"https://threejs-journey.com/challenges/019-aquarium\" target=\"_blank\">\n#019 Aquarium\n\n![019 Aquarium Three.js Challenge](./images/tjsj-019-aquarium.png)\n\u003C/a>\n\n\nThe theme is \"aquarium.\" I bounced around to several ideas initially, as is the nature of creative brainstorming. One Saturday morning, when at some family's house on the lake, my boys and I were surfing Pinterest. It has a great selection of wild, awesome concept art, impossible scenes, and surreal inspirations.\n\nWhat we discovered was in that vein of surrealism and fantastic. We saw whales and fish in cubes of water swimming through the air. We began dreaming up cool scenes and visual components.\n\n## Surreal Aquarium\n\nThe \"final\" project became a goofy, fun, [surreal aquarium](https://tjsj-aquarium.web.app/).\n\n![My Surreal Aquarium](./images/tjsj-019-surreal-aquarium.png)\n\nHere's how the project *developed*. 😉\n\n### Cubes and Spheres\n\nUpon implementing a cube, I discovered what's apparently a common issue: Three.js cubes are composed of 6 planes which have different vertexes along the edge. When I began animating the faces of the cube using a sin wave, the edges never stayed together. Womp womp.\n\nOnce I learned (with some help from our chatty robot friends at Grok and Gemini) that 6-faced issue with cubes, I shifted to using a sphere, which conceptually made better sense anyway.\n\nAdding the sin wave to the sphere completed a water bubble effect that's perfect for the swimming creature.\n\n### Staying Focused\n\nMy ideas kept running away with me, but I have forced to come back to the central idea: make your surreal aquarium with at least one fish and good lighting/textures/rendering and special FX.\n\nBy focusing on just accomplishing one thing at a time and keeping it small, I've been making good progress. There have been some tempting red herrings (no pun intended), but I remembered my castle fiasco and how I spent more time tinkering with how to move the castle pieces around instead of actually making a castle.\n\n### Environment\n\nOnce I finally got a fish ([see below for model credits](#credits)) that animates, grouped it with my sin wave bubble, and set an environment cube for the background, I noticed the bubble wasn't really reflecting the environment well. I've started with an environment map from Three.js to keep focused on the main parts. It's such a nice image, that I want the reflection to be nice too.\n\nBack to the LLMs for ideas, guidance, and experimental sources!\n\nYou can see the [fragment](https://github.com/Made-of-Clay/tjsj-19-aquarium/blob/dc67768592747282524a18059e6baf9c4345cf2b/src/waterCube.frag) and [vertex](https://github.com/Made-of-Clay/tjsj-19-aquarium/blob/dc67768592747282524a18059e6baf9c4345cf2b/src/waterCube.vert) shaders that the robots generated for me. 🤖\n\nNow the reflection on the bubble moves with the environment as the camera moves around.\n\nI did learn in the Three.js Journey Twitch stream (review of the projects) that a later course in Three.js Journey provides a better solution for the bubble. I'd like to cover that and return to the project to upgrade my bubble shader.\n\n### Swimming Fish\n\nAnimating the fish/bubble along a curve was tricky. After trying a few iterations, I concluded I needed to level up a bit more in this area. I know it can be done, but I didn't want to get stuck on one piece, and this could be triaged. I ended up animating one koi in a circle around the world origin point and another koi swimming back-and-forth below the camera.\n\nAdditionally, I found a model with a cluster of fish animating around its local coordinates. I threw them into a bubble and made them circle the origin as well. Admittedly, the animation loop is not seamless, and I'd love to import the file to Blender to (1) level up my skills there and, of course, (2) fix the animation loop.\n\n### Other Objects\n\nAside from the fish models, I added a rotating lily pad as a pseudo \"floor\" or base under the camera. It provides a visual barrier for the kois to pass under and create visual interest. There is also a floating island and treasure chest off to one side, again for visual interest.\n\nEverything in the scene is largely experimental and \"why not\" with the goal to add incremental complexity and practice loading assets. It's *not* how I usually like doing things, but it's sufficient to experiment and implement.\n\n## Credits\n\nThe following are links to the assets I downloaded and the model artists responsible for these great (free) resources. Thanks to them all for sharing freely!\n\n| Model                                                                                                      | Author                                            |\n| ---------------------------------------------------------------------------------------------------------- | ------------------------------------------------- |\n| [Treasure Chest](https://sketchfab.com/3d-models/stylized-treasure-chest-af528358159a4d7a850b4c8337d6928f) | [Gintoki1234](https://sketchfab.com/Gintoki1234)  |\n| [Fish School](https://sketchfab.com/3d-models/the-fish-particle-eb214794846949a5a0b1af75fd649aa2)          | [Loïc Norgeot](https://sketchfab.com/norgeotloic) |\n| [Lily Pad](https://sketchfab.com/3d-models/low-poly-lily-pad-85432122196d41a38f21288fac1f761e)             | [Logan S.](https://sketchfab.com/Logan_S)         |\n| [Koi](https://sketchfab.com/3d-models/koi-fish-236859b809984f52b70c94fd040b9c59)                           | [7PLUS](https://sketchfab.com/7plus)              |\n| [Floating Island](https://sketchfab.com/3d-models/floating-island-19cb15f12d7b4ddcbf1ef5034f81dc7e)        | [wasis007](https://sketchfab.com/wasis007)        |\n\n## Conclusion\n\nThis was a **great** experience in pushing to implement these new skills. Great and jubilant thanks to Bruno Simon and the rest of the Three.js Journey community for their feedback, encouragement, and kudos!\n\n**My biggest takeaways** during this project:\n\n- focus on a core idea, implement that, and grow out naturally from there (especially for these challenges)\n- free models are great, but don't forget the agency Blender (et al.) provides to customize/tweak details\n- if you're going to stretch for some feature (sweet shaders, epic models, etc.) be sure you \n\u003Cbr>(A) budget your time wisely or \n\u003Cbr>(B) prioritize features\n\nIf/when I make updates to the project, I'll update this post as well.\n\nKeep learning, keep growing, folks!","src/content/blog/threejs-journey-aug-25-aquarium.md",[747,748],"./images/tjsj-019-aquarium.png","./images/tjsj-019-surreal-aquarium.png","5f502e2d8953ce7d",{"html":751,"metadata":752},"\u003Ch1 id=\"threejs-journey-august-25-challenge-aquarium\">Three.js Journey August ‘25 Challenge: Aquarium\u003C/h1>\n\u003Cp>I began the Three.js Journey course in May 2025. June 2025 presented the ‘castle’ challenge, but I was a bit unprepared and didn’t appreciate the value of stating focused on an MVP (minimum viable “project” in this case).\u003C/p>\n\u003Cp>This second challenge I’ll attempt, I have been keeping my focus on the basics.\u003C/p>\n\u003Ch2 id=\"the-aquarium\">The Aquarium\u003C/h2>\n\u003Ca href=\"https://threejs-journey.com/challenges/019-aquarium\" target=\"_blank\">\n#019 Aquarium\n\u003C/a>\u003Cp>\u003Ca href=\"https://threejs-journey.com/challenges/019-aquarium\" target=\"_blank\">\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./images/tjsj-019-aquarium.png&#x22;,&#x22;alt&#x22;:&#x22;019 Aquarium Three.js Challenge&#x22;,&#x22;index&#x22;:0}\">\n\u003C/a>\u003C/p>\n\u003Cp>The theme is “aquarium.” I bounced around to several ideas initially, as is the nature of creative brainstorming. One Saturday morning, when at some family’s house on the lake, my boys and I were surfing Pinterest. It has a great selection of wild, awesome concept art, impossible scenes, and surreal inspirations.\u003C/p>\n\u003Cp>What we discovered was in that vein of surrealism and fantastic. We saw whales and fish in cubes of water swimming through the air. We began dreaming up cool scenes and visual components.\u003C/p>\n\u003Ch2 id=\"surreal-aquarium\">Surreal Aquarium\u003C/h2>\n\u003Cp>The “final” project became a goofy, fun, \u003Ca href=\"https://tjsj-aquarium.web.app/\">surreal aquarium\u003C/a>.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./images/tjsj-019-surreal-aquarium.png&#x22;,&#x22;alt&#x22;:&#x22;My Surreal Aquarium&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Here’s how the project \u003Cem>developed\u003C/em>. 😉\u003C/p>\n\u003Ch3 id=\"cubes-and-spheres\">Cubes and Spheres\u003C/h3>\n\u003Cp>Upon implementing a cube, I discovered what’s apparently a common issue: Three.js cubes are composed of 6 planes which have different vertexes along the edge. When I began animating the faces of the cube using a sin wave, the edges never stayed together. Womp womp.\u003C/p>\n\u003Cp>Once I learned (with some help from our chatty robot friends at Grok and Gemini) that 6-faced issue with cubes, I shifted to using a sphere, which conceptually made better sense anyway.\u003C/p>\n\u003Cp>Adding the sin wave to the sphere completed a water bubble effect that’s perfect for the swimming creature.\u003C/p>\n\u003Ch3 id=\"staying-focused\">Staying Focused\u003C/h3>\n\u003Cp>My ideas kept running away with me, but I have forced to come back to the central idea: make your surreal aquarium with at least one fish and good lighting/textures/rendering and special FX.\u003C/p>\n\u003Cp>By focusing on just accomplishing one thing at a time and keeping it small, I’ve been making good progress. There have been some tempting red herrings (no pun intended), but I remembered my castle fiasco and how I spent more time tinkering with how to move the castle pieces around instead of actually making a castle.\u003C/p>\n\u003Ch3 id=\"environment\">Environment\u003C/h3>\n\u003Cp>Once I finally got a fish (\u003Ca href=\"#credits\">see below for model credits\u003C/a>) that animates, grouped it with my sin wave bubble, and set an environment cube for the background, I noticed the bubble wasn’t really reflecting the environment well. I’ve started with an environment map from Three.js to keep focused on the main parts. It’s such a nice image, that I want the reflection to be nice too.\u003C/p>\n\u003Cp>Back to the LLMs for ideas, guidance, and experimental sources!\u003C/p>\n\u003Cp>You can see the \u003Ca href=\"https://github.com/Made-of-Clay/tjsj-19-aquarium/blob/dc67768592747282524a18059e6baf9c4345cf2b/src/waterCube.frag\">fragment\u003C/a> and \u003Ca href=\"https://github.com/Made-of-Clay/tjsj-19-aquarium/blob/dc67768592747282524a18059e6baf9c4345cf2b/src/waterCube.vert\">vertex\u003C/a> shaders that the robots generated for me. 🤖\u003C/p>\n\u003Cp>Now the reflection on the bubble moves with the environment as the camera moves around.\u003C/p>\n\u003Cp>I did learn in the Three.js Journey Twitch stream (review of the projects) that a later course in Three.js Journey provides a better solution for the bubble. I’d like to cover that and return to the project to upgrade my bubble shader.\u003C/p>\n\u003Ch3 id=\"swimming-fish\">Swimming Fish\u003C/h3>\n\u003Cp>Animating the fish/bubble along a curve was tricky. After trying a few iterations, I concluded I needed to level up a bit more in this area. I know it can be done, but I didn’t want to get stuck on one piece, and this could be triaged. I ended up animating one koi in a circle around the world origin point and another koi swimming back-and-forth below the camera.\u003C/p>\n\u003Cp>Additionally, I found a model with a cluster of fish animating around its local coordinates. I threw them into a bubble and made them circle the origin as well. Admittedly, the animation loop is not seamless, and I’d love to import the file to Blender to (1) level up my skills there and, of course, (2) fix the animation loop.\u003C/p>\n\u003Ch3 id=\"other-objects\">Other Objects\u003C/h3>\n\u003Cp>Aside from the fish models, I added a rotating lily pad as a pseudo “floor” or base under the camera. It provides a visual barrier for the kois to pass under and create visual interest. There is also a floating island and treasure chest off to one side, again for visual interest.\u003C/p>\n\u003Cp>Everything in the scene is largely experimental and “why not” with the goal to add incremental complexity and practice loading assets. It’s \u003Cem>not\u003C/em> how I usually like doing things, but it’s sufficient to experiment and implement.\u003C/p>\n\u003Ch2 id=\"credits\">Credits\u003C/h2>\n\u003Cp>The following are links to the assets I downloaded and the model artists responsible for these great (free) resources. Thanks to them all for sharing freely!\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Model\u003C/th>\u003Cth>Author\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ca href=\"https://sketchfab.com/3d-models/stylized-treasure-chest-af528358159a4d7a850b4c8337d6928f\">Treasure Chest\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://sketchfab.com/Gintoki1234\">Gintoki1234\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://sketchfab.com/3d-models/the-fish-particle-eb214794846949a5a0b1af75fd649aa2\">Fish School\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://sketchfab.com/norgeotloic\">Loïc Norgeot\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://sketchfab.com/3d-models/low-poly-lily-pad-85432122196d41a38f21288fac1f761e\">Lily Pad\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://sketchfab.com/Logan_S\">Logan S.\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://sketchfab.com/3d-models/koi-fish-236859b809984f52b70c94fd040b9c59\">Koi\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://sketchfab.com/7plus\">7PLUS\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://sketchfab.com/3d-models/floating-island-19cb15f12d7b4ddcbf1ef5034f81dc7e\">Floating Island\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://sketchfab.com/wasis007\">wasis007\u003C/a>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>This was a \u003Cstrong>great\u003C/strong> experience in pushing to implement these new skills. Great and jubilant thanks to Bruno Simon and the rest of the Three.js Journey community for their feedback, encouragement, and kudos!\u003C/p>\n\u003Cp>\u003Cstrong>My biggest takeaways\u003C/strong> during this project:\u003C/p>\n\u003Cul>\n\u003Cli>focus on a core idea, implement that, and grow out naturally from there (especially for these challenges)\u003C/li>\n\u003Cli>free models are great, but don’t forget the agency Blender (et al.) provides to customize/tweak details\u003C/li>\n\u003Cli>if you’re going to stretch for some feature (sweet shaders, epic models, etc.) be sure you\n\u003Cbr>(A) budget your time wisely or\n\u003Cbr>(B) prioritize features\u003C/li>\n\u003C/ul>\n\u003Cp>If/when I make updates to the project, I’ll update this post as well.\u003C/p>\n\u003Cp>Keep learning, keep growing, folks!\u003C/p>",{"headings":753,"localImagePaths":782,"remoteImagePaths":783,"frontmatter":738,"imagePaths":784},[754,757,760,763,766,769,772,775,778,781],{"depth":24,"slug":755,"text":756},"threejs-journey-august-25-challenge-aquarium","Three.js Journey August ‘25 Challenge: Aquarium",{"depth":27,"slug":758,"text":759},"the-aquarium","The Aquarium",{"depth":27,"slug":761,"text":762},"surreal-aquarium","Surreal Aquarium",{"depth":37,"slug":764,"text":765},"cubes-and-spheres","Cubes and Spheres",{"depth":37,"slug":767,"text":768},"staying-focused","Staying Focused",{"depth":37,"slug":770,"text":771},"environment","Environment",{"depth":37,"slug":773,"text":774},"swimming-fish","Swimming Fish",{"depth":37,"slug":776,"text":777},"other-objects","Other Objects",{"depth":27,"slug":779,"text":780},"credits","Credits",{"depth":27,"slug":180,"text":181},[747,748],[],[747,748],"threejs-journey-aug-25-aquarium.md","home",["Map",788,789,805,806],"about",{"id":788,"data":790,"body":791,"filePath":792,"digest":793,"rendered":794,"legacyId":804},{},"## About Me\n\nMy name is Adam. I've been a professional web developer since 2010 (oh dang, {years} years). I started as a full stack developer in the early days of jQuery and pre-JS renaissance of the mid-teens. I then shifted to managing/building commercial WordPress websites for a few years. After that is when I discovered my love of the front-end focus and building UIs. (Don't get me wrong, back-end work can be fun, but when I can stay out of databases and server configurations, I'm happiest.)\n\nCurrently, my favorite things about web today are UI-building ([Vue.js](https://vuejs.org/) for the win!), animations with both CSS and JS, interactive SVGs, and the amazing things that can be done with WebGL. The super stars platformed at [awwwards](https://www.awwwards.com/) are great examples of the type of bleeding-edge work I aspire to master. \n\n*Update*: I've since learned the term for this: **creative developer**. It taps into the skills and tooling knowledge I gained back in my undergrad and appeals to an ever-present itch to be creative with computers.\n\nOn this site, if I'm consistent and following the plan, you'll find some of the content focuses on web development and web-tech adjacent topics, but you'll also likely find other postings on topics I find interesting. Time is always the limiting factor, and I'm not willing to trade time where I should be with my wife as a good husband or sons as a good father, so posts may be less frequent than I'd like, but I'll do my best.\n\nPlease reach out through [my social media](#bottom) to engage! I appreciate your thoughtful feedback where applicable.","src/content/home/about.md","ad192a0aabdb2bd5",{"html":795,"metadata":796},"\u003Ch2 id=\"about-me\">About Me\u003C/h2>\n\u003Cp>My name is Adam. I’ve been a professional web developer since 2010 (oh dang, {years} years). I started as a full stack developer in the early days of jQuery and pre-JS renaissance of the mid-teens. I then shifted to managing/building commercial WordPress websites for a few years. After that is when I discovered my love of the front-end focus and building UIs. (Don’t get me wrong, back-end work can be fun, but when I can stay out of databases and server configurations, I’m happiest.)\u003C/p>\n\u003Cp>Currently, my favorite things about web today are UI-building (\u003Ca href=\"https://vuejs.org/\">Vue.js\u003C/a> for the win!), animations with both CSS and JS, interactive SVGs, and the amazing things that can be done with WebGL. The super stars platformed at \u003Ca href=\"https://www.awwwards.com/\">awwwards\u003C/a> are great examples of the type of bleeding-edge work I aspire to master.\u003C/p>\n\u003Cp>\u003Cem>Update\u003C/em>: I’ve since learned the term for this: \u003Cstrong>creative developer\u003C/strong>. It taps into the skills and tooling knowledge I gained back in my undergrad and appeals to an ever-present itch to be creative with computers.\u003C/p>\n\u003Cp>On this site, if I’m consistent and following the plan, you’ll find some of the content focuses on web development and web-tech adjacent topics, but you’ll also likely find other postings on topics I find interesting. Time is always the limiting factor, and I’m not willing to trade time where I should be with my wife as a good husband or sons as a good father, so posts may be less frequent than I’d like, but I’ll do my best.\u003C/p>\n\u003Cp>Please reach out through \u003Ca href=\"#bottom\">my social media\u003C/a> to engage! I appreciate your thoughtful feedback where applicable.\u003C/p>",{"headings":797,"localImagePaths":801,"remoteImagePaths":802,"frontmatter":790,"imagePaths":803},[798],{"depth":27,"slug":799,"text":800},"about-me","About Me",[],[],[],"about.md","welcome",{"id":805,"data":807,"body":808,"filePath":809,"digest":810,"rendered":811,"legacyId":821},{},"# AdamLeis.com\n\n**Welcome!** This site acts as my personal blog and portfolio. The various topics of interest I plan on exploring here range from web development, experimental web tech, technology in general, philosophy, religion, science, and more. Poke around and feel free to reach out.\n\n\u003Cmark>[Relaunch Note:]\u003C/mark> this site is a work-in-progress. I've been struggling getting it relaunched due to the ebb-and-flow of life. I'm going to keep refining it and improving various features. I needed an MVP to just get something out there again. Don't judge. Or… do judge, but be constructively critical and give me good notes.","src/content/home/welcome.md","9ff7eebac2752d65",{"html":812,"metadata":813},"\u003Ch1 id=\"adamleiscom\">AdamLeis.com\u003C/h1>\n\u003Cp>\u003Cstrong>Welcome!\u003C/strong> This site acts as my personal blog and portfolio. The various topics of interest I plan on exploring here range from web development, experimental web tech, technology in general, philosophy, religion, science, and more. Poke around and feel free to reach out.\u003C/p>\n\u003Cp>\u003Cmark>[Relaunch Note:]\u003C/mark> this site is a work-in-progress. I’ve been struggling getting it relaunched due to the ebb-and-flow of life. I’m going to keep refining it and improving various features. I needed an MVP to just get something out there again. Don’t judge. Or… do judge, but be constructively critical and give me good notes.\u003C/p>",{"headings":814,"localImagePaths":818,"remoteImagePaths":819,"frontmatter":807,"imagePaths":820},[815],{"depth":24,"slug":816,"text":817},"adamleiscom","AdamLeis.com",[],[],[],"welcome.md"]